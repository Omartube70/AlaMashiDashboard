@page "/login"
@layout AuthLayout
@using AdminDashboard.Services
@using AlaMashiDashboard.Components.Layout
@inject LocalizationService Localization
@inject ApiService ApiService
@inject NavigationManager NavManager
@inject TokenManagerService TokenManager
@inject ISnackbar Snackbar

<PageTitle>Login - Admin Dashboard</PageTitle>

<!-- Logo & Header -->
<div class="auth-header fade-in">
    <div class="logo-circle pulse-icon">
        <MudIcon Icon="@Icons.Material.Filled.AdminPanelSettings" Size="Size.Large" Color="Color.Surface" />
    </div>
    <MudText Typo="Typo.h4" Class="auth-title mt-4">
        @(Localization.IsArabic ? "تسجيل الدخول" : "Admin Login")
    </MudText>
    <MudText Typo="Typo.body1" Class="auth-subtitle mt-2">
        @(Localization.IsArabic ? "أدخل بياناتك للوصول إلى لوحة التحكم" : "Enter your credentials to access the dashboard")
    </MudText>
</div>

<!-- Login Card -->
<MudCard Elevation="0" Class="auth-card glass-card slide-up">
    <MudCardContent Class="pa-6">
        <MudForm @ref="_form">
            
            <!-- Email Field -->
            <MudTextField @bind-Value="_email"
                          Label="@(Localization.IsArabic ? "البريد الإلكتروني" : "Email Address")"
                          Variant="Variant.Outlined"
                          FullWidth="true"
                          Immediate="true"
                          Required="true"
                          RequiredError="@(Localization.IsArabic ? "البريد الإلكتروني مطلوب" : "Email is required")"
                          Validation="@(new Func<string, string?>(email => {
                              if (string.IsNullOrWhiteSpace(email)) return Localization.IsArabic ? "البريد الإلكتروني مطلوب" : "Email is required";
                              if (!email.Contains("@")) return Localization.IsArabic ? "البريد الإلكتروني غير صحيح" : "Invalid email format";
                              return null;
                          }))"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Email"
                          AdornmentColor="Color.Primary"
                          Class="modern-input mb-4"
                          Disabled="@_isLoggingIn" />

            <!-- Password Field -->
            <MudTextField @bind-Value="_password"
                          Label="@(Localization.IsArabic ? "كلمة المرور" : "Password")"
                          Variant="Variant.Outlined"
                          InputType="@_passwordInputType"
                          FullWidth="true"
                          Immediate="true"
                          Required="true"
                          RequiredError="@(Localization.IsArabic ? "كلمة المرور مطلوبة" : "Password is required")"
                          Adornment="Adornment.End"
                          AdornmentIcon="@_passwordIcon"
                          OnAdornmentClick="TogglePasswordVisibility"
                          AdornmentAriaLabel="Toggle password visibility"
                          Class="modern-input mb-3"
                          Disabled="@_isLoggingIn" />

            <!-- Error Message -->
            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <MudAlert Severity="@_errorSeverity"
                          Class="mb-4 modern-alert"
                          Dense="true"
                          Variant="Variant.Filled"
                          Icon="@(_errorSeverity == Severity.Error ? Icons.Material.Filled.Error : Icons.Material.Filled.Warning)"
                          CloseIcon="@Icons.Material.Filled.Close"
                          CloseIconClicked="@(() => _errorMessage = "")">
                    @_errorMessage
                </MudAlert>
            }

        </MudForm>
    </MudCardContent>

    <MudCardActions Class="pa-6 pt-0">
        <MudStack Spacing="3" Style="width: 100%;">

            <!-- Login Button -->
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="true"
                       OnClick="HandleLogin"
                       StartIcon="@Icons.Material.Filled.Login"
                       Class="modern-button"
                       Disabled="@_isLoggingIn">
                @if (_isLoggingIn)
                {
                    <MudProgressCircular Size="Size.Small" 
                                         Indeterminate="true" 
                                         Class="@(Localization.IsArabic ? "ml-2" : "mr-2")" 
                                         Color="Color.Surface" />
                    <span>@(Localization.IsArabic ? "جاري تسجيل الدخول..." : "Signing in...")</span>
                }
                else
                {
                    <span>@(Localization.IsArabic ? "تسجيل الدخول" : "Sign In")</span>
                }
            </MudButton>

            <!-- Forgot Password Link -->
            <MudButton Variant="Variant.Text"
                       Color="Color.Primary"
                       Size="Size.Medium"
                       FullWidth="true"
                       Href="/ForgotPassword"
                       StartIcon="@Icons.Material.Filled.LockReset"
                       Class="forgot-button">
                @(Localization.IsArabic ? "نسيت كلمة المرور؟" : "Forgot Password?")
            </MudButton>

        </MudStack>
    </MudCardActions>
</MudCard>

<!-- Admin Only Notice -->
<MudPaper Class="mt-4 pa-4 info-box glass-card fade-in" Elevation="0">
    <div class="d-flex align-center">
        <MudIcon Icon="@Icons.Material.Filled.AdminPanelSettings" 
                 Color="Color.Warning" 
                 Size="Size.Medium"
                 Class="@(Localization.IsArabic ? "ml-3" : "mr-3")" />
        <MudText Typo="Typo.body2" Style="color: rgba(255,255,255,0.95); line-height: 1.6;">
            @(Localization.IsArabic 
                ? "لوحة التحكم هذه مخصصة للمسؤولين فقط. يجب أن يكون لديك صلاحيات المسؤول للوصول." 
                : "This dashboard is for administrators only. You must have admin privileges to access.")
        </MudText>
    </div>
</MudPaper>

<style>
    /* Auth Header */
    .auth-header {
        text-align: center;
        margin-bottom: 2.5rem;
    }

    .logo-circle {
        width: 90px;
        height: 90px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        box-shadow: 0 10px 40px rgba(102, 126, 234, 0.5);
        border: 4px solid rgba(255, 255, 255, 0.2);
    }

    .auth-title {
        color: white;
        font-weight: 800;
        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }

    .auth-subtitle {
        color: rgba(255, 255, 255, 0.95);
        font-weight: 500;
    }

    /* Glass Card */
    .glass-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        -webkit-backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.3);
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        border-radius: 24px;
        overflow: hidden;
    }

    [data-theme="dark"] .glass-card {
        background: rgba(30, 41, 59, 0.95);
        border-color: rgba(255, 255, 255, 0.1);
    }

    /* Modern Input */
    .modern-input ::deep .mud-input-root {
        border-radius: 14px !important;
    }

    .modern-input ::deep .mud-input-outlined {
        border-radius: 14px !important;
        transition: all 0.3s ease;
    }

    .modern-input ::deep .mud-input-outlined:hover .mud-input-outlined-border {
        border-color: #667eea !important;
    }

    .modern-input ::deep .mud-input-outlined.mud-input-focused {
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.25);
        transform: translateY(-2px);
    }

    .modern-input ::deep .mud-input-outlined.mud-input-focused .mud-input-outlined-border {
        border-width: 2px !important;
        border-color: #667eea !important;
    }

    /* Modern Button */
    .modern-button {
        height: 56px;
        border-radius: 14px;
        font-weight: 700;
        font-size: 1.05rem;
        text-transform: none;
        letter-spacing: 0.5px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        border: none;
    }

    .modern-button:hover:not(:disabled) {
        transform: translateY(-3px);
        box-shadow: 0 10px 30px rgba(102, 126, 234, 0.6);
    }

    .modern-button:active:not(:disabled) {
        transform: translateY(-1px);
    }

    .modern-button:disabled {
        opacity: 0.7;
    }

    /* Forgot Button */
    .forgot-button {
        height: 48px;
        border-radius: 12px;
        font-weight: 600;
        text-transform: none;
        transition: all 0.3s ease;
    }

    [dir="ltr"] .forgot-button:hover {
        transform: translateX(4px);
        background: rgba(102, 126, 234, 0.1) !important;
    }

    [dir="rtl"] .forgot-button:hover {
        transform: translateX(-4px);
        background: rgba(102, 126, 234, 0.1) !important;
    }

    /* Info Box */
    .info-box {
        background: rgba(255, 255, 255, 0.15) !important;
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.25) !important;
        border-radius: 16px;
    }

    /* Modern Alert */
    .modern-alert {
        border-radius: 12px;
        font-weight: 500;
    }

    /* Animations */
    .fade-in {
        animation: fadeIn 0.8s ease-in;
    }

    .slide-up {
        animation: slideUp 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .pulse-icon {
        animation: pulse 3s ease-in-out infinite;
    }

    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(40px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.08); }
    }

    /* Responsive */
    @@media (max-width: 600px) {
        .auth-header {
            margin-bottom: 2rem;
        }

        .logo-circle {
            width: 75px;
            height: 75px;
        }

        .auth-title {
            font-size: 1.75rem;
        }

        .glass-card {
            border-radius: 20px;
        }

        .modern-button {
            height: 52px;
            font-size: 1rem;
        }
    }
</style>

@code {
    private string _email = "";
    private string _password = "";
    private string _errorMessage = "";
    private Severity _errorSeverity = Severity.Error;
    private bool _isLoggingIn = false;
    private MudForm? _form;

    private bool _passwordVisible = false;
    private InputType _passwordInputType = InputType.Password;
    private string _passwordIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        _passwordVisible = !_passwordVisible;
        _passwordInputType = _passwordVisible ? InputType.Text : InputType.Password;
        _passwordIcon = _passwordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }

    private async Task HandleLogin()
    {
        _errorMessage = "";

        if (_form == null) return;

        await _form.Validate();
        if (!_form.IsValid) return;

        _isLoggingIn = true;
        StateHasChanged();

        try
        {
            // 1️⃣ Login
            bool loginSuccess = await ApiService.LoginAsync(_email, _password);

            if (!loginSuccess)
            {
                _errorMessage = Localization.IsArabic
                    ? "❌ البريد الإلكتروني أو كلمة المرور غير صحيحة"
                    : "❌ Invalid email or password";
                _errorSeverity = Severity.Error;
                _isLoggingIn = false;
                StateHasChanged();
                return;
            }

            // 2️⃣ Check Admin Role
            bool isAdmin = await TokenManager.IsAdminAsync();

            if (!isAdmin)
            {
                await TokenManager.ClearTokensAsync();

                _errorMessage = Localization.IsArabic
                    ? "⚠️ عذراً، هذه اللوحة مخصصة للمسؤولين فقط"
                    : "⚠️ Sorry, this dashboard is for administrators only";
                _errorSeverity = Severity.Warning;
                _isLoggingIn = false;
                StateHasChanged();

                Snackbar.Add(_errorMessage, Severity.Warning, config =>
                {
                    config.VisibleStateDuration = 5000;
                });

                return;
            }

            // 3️⃣ Success
            Snackbar.Add(
                Localization.IsArabic 
                    ? "✅ تم تسجيل الدخول بنجاح!" 
                    : "✅ Login successful!",
                Severity.Success
            );

            await Task.Delay(500);
            NavManager.NavigateTo("/", forceLoad: true);
        }
        catch (Exception ex)
        {
            _errorMessage = Localization.IsArabic
                ? $"❌ حدث خطأ: {ex.Message}"
                : $"❌ Error: {ex.Message}";
            _errorSeverity = Severity.Error;
            _isLoggingIn = false;
            StateHasChanged();
        }
    }
}