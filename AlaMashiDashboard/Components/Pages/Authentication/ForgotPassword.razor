@page "/ForgotPassword"
@layout AuthLayout
@using AdminDashboard.Services
@using AlaMashiDashboard.Components.Layout
@inject LocalizationService Localization
@inject ApiService ApiService
@inject NavigationManager NavManager

<PageTitle>@Localization.Get("forgot.title") - @Localization.Get("app.title")</PageTitle>

<!-- Logo & Header -->
<div class="auth-header fade-in">
    <div class="logo-circle pulse-icon">
        <MudIcon Icon="@Icons.Material.Filled.VpnKey" Size="Size.Large" Color="Color.Surface" />
    </div>
    <MudText Typo="Typo.h4" Class="auth-title mt-4">
        @Localization.Get("forgot.title")
    </MudText>
    <MudText Typo="Typo.body1" Class="auth-subtitle mt-2">
        @Localization.Get("forgot.subtitle")
    </MudText>
</div>

<!-- Forgot Password Card -->
<MudCard Elevation="0" Class="auth-card glass-card slide-up">
    <MudCardContent Class="pa-6">
        <MudForm @ref="_form">

            <!-- Email Field -->
            <MudTextField @bind-Value="_email"
                          Label="@Localization.Get("login.email")"
                          Variant="Variant.Outlined"
                          FullWidth="true"
                          Immediate="true"
                          Required="true"
                          RequiredError="@Localization.Get("login.email_required")"
                          Validation="@(InputValidator.ValidateEmail)"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Email"
                          AdornmentColor="Color.Primary"
                          Class="modern-input mb-4"
                          Disabled="@_isSending" />

            <!-- Success/Error Message -->
            @if (!string.IsNullOrEmpty(_message))
            {
                <MudAlert Severity="@_messageSeverity"
                          Class="mb-4 modern-alert"
                          Dense="true"
                          Variant="Variant.Filled"
                          Icon="@(_messageSeverity == Severity.Success ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Error)"
                          CloseIcon="@Icons.Material.Filled.Close"
                          CloseIconClicked="@(() => _message = "")">
                    @_message
                </MudAlert>
            }

        </MudForm>
    </MudCardContent>

    <MudCardActions Class="pa-6 pt-0">
        <MudStack Spacing="3" Style="width: 100%;">

            <!-- Send Email Button -->
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="true"
                       OnClick="HandleSend"
                       StartIcon="@Icons.Material.Filled.Send"
                       Class="modern-button"
                       Disabled="@_isSending">
                @if (_isSending)
                {
                    <MudProgressCircular Size="Size.Small"
                                         Indeterminate="true"
                                         Class="@(_isRtl ? "ml-2" : "mr-2")"
                                         Color="Color.Surface" />
                    <span>@Localization.Get("forgot.sending")</span>
                }
                else
                {
                    <span>@Localization.Get("forgot.send")</span>
                }
            </MudButton>

            <!-- Back to Login -->
            <MudButton Variant="Variant.Text"
                       Color="Color.Primary"
                       Size="Size.Medium"
                       FullWidth="true"
                       Href="/login"
                       StartIcon="@Icons.Material.Filled.ArrowBack"
                       Class="forgot-button">
                @Localization.Get("forgot.back")
            </MudButton>

        </MudStack>
    </MudCardActions>
</MudCard>

<!-- Info Box -->
<MudPaper Class="mt-4 pa-4 info-box glass-card fade-in" Elevation="0">
    <div class="d-flex align-center">
        <MudIcon Icon="@Icons.Material.Filled.Info"
                 Color="Color.Info"
                 Size="Size.Medium"
                 Class="@(_isRtl ? "ml-3" : "mr-3")" />
        <MudText Typo="Typo.body2" Style="color: rgba(255,255,255,0.95); line-height: 1.6;">
            @Localization.Get("forgot.info")
        </MudText>
    </div>
</MudPaper>

<style>
    /* Inherit all styles from Login page */
    .auth-header {
        text-align: center;
        margin-bottom: 2.5rem;
    }

    .logo-circle {
        width: 90px;
        height: 90px;
        border-radius: 50%;
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        box-shadow: 0 10px 40px rgba(240, 147, 251, 0.5);
        border: 4px solid rgba(255, 255, 255, 0.2);
    }

    .auth-title {
        color: white;
        font-weight: 800;
        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }

    .auth-subtitle {
        color: rgba(255, 255, 255, 0.95);
        font-weight: 500;
    }

    .glass-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(20px);
        -webkit-backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.3);
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        border-radius: 24px;
        overflow: hidden;
    }

    [data-theme="dark"] .glass-card {
        background: rgba(30, 41, 59, 0.95);
        border-color: rgba(255, 255, 255, 0.1);
    }

    .modern-input ::deep .mud-input-outlined {
        border-radius: 14px;
        transition: all 0.3s ease;
    }

        .modern-input ::deep .mud-input-outlined:hover {
            box-shadow: 0 4px 12px rgba(240, 147, 251, 0.15);
        }

        .modern-input ::deep .mud-input-outlined.mud-input-focused {
            box-shadow: 0 6px 20px rgba(240, 147, 251, 0.25);
            transform: translateY(-2px);
        }

    .modern-button {
        height: 56px;
        border-radius: 14px;
        font-weight: 700;
        font-size: 1.05rem;
        text-transform: none;
        letter-spacing: 0.5px;
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        box-shadow: 0 6px 20px rgba(240, 147, 251, 0.4);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        border: none;
    }

        .modern-button:hover:not(:disabled) {
            transform: translateY(-3px);
            box-shadow: 0 10px 30px rgba(240, 147, 251, 0.6);
        }

        .modern-button:active:not(:disabled) {
            transform: translateY(-1px);
        }

        .modern-button:disabled {
            opacity: 0.7;
        }

    .forgot-button {
        height: 48px;
        border-radius: 12px;
        font-weight: 600;
        text-transform: none;
        transition: all 0.3s ease;
    }

    [dir="ltr"] .forgot-button:hover {
        transform: translateX(-4px);
        background: rgba(240, 147, 251, 0.1);
    }

    [dir="rtl"] .forgot-button:hover {
        transform: translateX(4px);
        background: rgba(240, 147, 251, 0.1);
    }

    .info-box {
        background: rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(20px);
        border: 1px solid rgba(255, 255, 255, 0.25);
        border-radius: 16px;
    }

    .modern-alert {
        border-radius: 12px;
        font-weight: 500;
    }

    .fade-in {
        animation: fadeIn 0.8s ease-in;
    }

    .slide-up {
        animation: slideUp 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .pulse-icon {
        animation: pulse 3s ease-in-out infinite;
    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    @@keyframes slideUp {
        from

    {
        opacity: 0;
        transform: translateY(40px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    @@keyframes pulse {
        0%, 100%

    {
        transform: scale(1);
    }

    50% {
        transform: scale(1.08);
    }

    }

    @@media (max-width: 600px) {
        .auth-header

    {
        margin-bottom: 2rem;
    }

    .logo-circle {
        width: 75px;
        height: 75px;
    }

    .auth-title {
        font-size: 1.75rem;
    }

    .glass-card {
        border-radius: 20px;
    }

    .modern-button {
        height: 52px;
        font-size: 1rem;
    }

    }
</style>

@code {
    private string _email = "";
    private string _message = "";
    private Severity _messageSeverity = Severity.Error;
    private bool _isSending = false;
    private bool _isRtl => Localization.IsArabic;
    private MudForm? _form;

    private async Task HandleSend()
    {
        _message = "";
        if (_form == null) return;

        await _form.Validate();
        if (!_form.IsValid) return;

        _isSending = true;
        StateHasChanged();

        await Task.Delay(500);
        bool success = await ApiService.ForgotPasswordAsync(_email);

        _isSending = false;

        if (success)
        {
            _message = Localization.IsArabic
                ? "✅ تم إرسال البريد الإلكتروني بنجاح! تحقق من بريدك الوارد"
                : "✅ Email sent successfully! Check your inbox";
            _messageSeverity = Severity.Success;
            StateHasChanged();

            await Task.Delay(2000);
            NavManager.NavigateTo($"/ResetPassword?email={_email}");
        }
        else
        {
            _message = Localization.IsArabic
                ? "❌ فشل إرسال البريد. تحقق من عنوانك وحاول مرة أخرى"
                : "❌ Failed to send email. Check your address and try again";
            _messageSeverity = Severity.Error;
            StateHasChanged();
        }
    }
}