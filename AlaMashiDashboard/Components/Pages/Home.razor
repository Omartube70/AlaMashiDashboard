@page "/"
@inject ApiService ApiService
@inject NavigationManager NavManager
@using AdminDashboard.Services
@using AlaMashiDashboard.Services
@inject TokenManagerService TokenManager
@inject LocalizationService Localization

<PageTitle>@Localization.Get("menu.dashboard") - @Localization.Get("app.title")</PageTitle>

<!-- Page Header -->
<div class="page-header mb-4 fade-in">
    <MudText Typo="Typo.h4" Class="font-weight-bold mb-2">
        <MudIcon Icon="@Icons.Material.Filled.Dashboard" Class="mx-2" />
        @Localization.Get("dashboard.title")
    </MudText>
    <MudText Typo="Typo.body2" Color="Color.Secondary">
        @Localization.Get("dashboard.welcome") @_userName! @Localization.Get("dashboard.welcome_msg")
    </MudText>
</div>

@if (isLoading)
{
    <MudGrid Spacing="3">
        @for (int i = 0; i < 8; i++)
        {
            <MudItem xs="12" sm="6" lg="3">
                <MudCard Elevation="2">
                    <MudCardContent Class="pa-4">
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="120px" />
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}
else if (dashboardData != null)
{
    <!-- Stats Cards Grid -->
    <MudGrid Spacing="3" Class="mb-4">
        <!-- Total Orders -->
        <MudItem xs="12" sm="6" lg="3">
            <MudCard Elevation="2" Class="stat-card slide-in" Style="animation-delay: 0.1s;">
                <MudCardContent Class="pa-4">
                    <div class="d-flex justify-space-between align-center mb-2">
                        <MudIcon Icon="@Icons.Material.Filled.ShoppingCart"
                                 Size="Size.Large"
                                 Color="Color.Primary" />
                        @if (dashboardData.OrderStatusSummary.TotalOrders > 0)
                        {
                            <MudChip Size="Size.Small" Color="Color.Info">
                                @dashboardData.OrderStatusSummary.PendingCount @(Localization.IsArabic ? "معلق" : "pending")
                            </MudChip>
                        }
                    </div>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-1">
                        @Localization.Get("dashboard.total_orders")
                    </MudText>
                    <MudText Typo="Typo.h4" Class="font-weight-bold">
                        @dashboardData.TotalOrders.ToString("N0")
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Today Revenue -->
        <MudItem xs="12" sm="6" lg="3">
            <MudCard Elevation="2" Class="stat-card slide-in" Style="animation-delay: 0.2s;">
                <MudCardContent Class="pa-4">
                    <div class="d-flex justify-space-between align-center mb-2">
                        <MudIcon Icon="@Icons.Material.Filled.TrendingUp"
                                 Size="Size.Large"
                                 Color="Color.Success" />
                        <MudChip Size="Size.Small" Color="Color.Success">
                            @(Localization.IsArabic ? "اليوم" : "Today")
                        </MudChip>
                    </div>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-1">
                        @Localization.Get("dashboard.today_revenue")
                    </MudText>
                    <MudText Typo="Typo.h4" Class="font-weight-bold">
                        @dashboardData.TodayRevenue.ToString("N2") @(Localization.IsArabic ? "ج.م" : "EGP")
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Month Revenue -->
        <MudItem xs="12" sm="6" lg="3">
            <MudCard Elevation="2" Class="stat-card slide-in" Style="animation-delay: 0.3s;">
                <MudCardContent Class="pa-4">
                    <div class="d-flex justify-space-between align-center mb-2">
                        <MudIcon Icon="@Icons.Material.Filled.AttachMoney"
                                 Size="Size.Large"
                                 Color="Color.Warning" />
                        <MudChip Size="Size.Small" Color="Color.Warning">
                            @(Localization.IsArabic ? "الشهر" : "Month")
                        </MudChip>
                    </div>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-1">
                        @Localization.Get("dashboard.month_revenue")
                    </MudText>
                    <MudText Typo="Typo.h4" Class="font-weight-bold">
                        @dashboardData.MonthRevenue.ToString("N2") @(Localization.IsArabic ? "ج.م" : "EGP")
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Total Users -->
        <MudItem xs="12" sm="6" lg="3">
            <MudCard Elevation="2" Class="stat-card slide-in" Style="animation-delay: 0.4s;">
                <MudCardContent Class="pa-4">
                    <div class="d-flex justify-space-between align-center mb-2">
                        <MudIcon Icon="@Icons.Material.Filled.People"
                                 Size="Size.Large"
                                 Color="Color.Info" />
                    </div>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-1">
                        @Localization.Get("dashboard.total_users")
                    </MudText>
                    <MudText Typo="Typo.h4" Class="font-weight-bold">
                        @dashboardData.TotalUsers.ToString("N0")
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Total Products -->
        <MudItem xs="12" sm="6" lg="3">
            <MudCard Elevation="2" Class="stat-card slide-in" Style="animation-delay: 0.5s;">
                <MudCardContent Class="pa-4">
                    <div class="d-flex justify-space-between align-center mb-2">
                        <MudIcon Icon="@Icons.Material.Filled.Inventory"
                                 Size="Size.Large"
                                 Color="Color.Secondary" />
                    </div>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-1">
                        @Localization.Get("dashboard.total_products")
                    </MudText>
                    <MudText Typo="Typo.h4" Class="font-weight-bold">
                        @dashboardData.TotalProducts.ToString("N0")
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Total Categories -->
        <MudItem xs="12" sm="6" lg="3">
            <MudCard Elevation="2" Class="stat-card slide-in" Style="animation-delay: 0.6s;">
                <MudCardContent Class="pa-4">
                    <div class="d-flex justify-space-between align-center mb-2">
                        <MudIcon Icon="@Icons.Material.Filled.Category"
                                 Size="Size.Large"
                                 Color="Color.Tertiary" />
                    </div>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-1">
                        @Localization.Get("dashboard.categories")
                    </MudText>
                    <MudText Typo="Typo.h4" Class="font-weight-bold">
                        @dashboardData.TotalCategories.ToString("N0")
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Active Offers -->
        <MudItem xs="12" sm="6" lg="3">
            <MudCard Elevation="2" Class="stat-card slide-in" Style="animation-delay: 0.7s;">
                <MudCardContent Class="pa-4">
                    <div class="d-flex justify-space-between align-center mb-2">
                        <MudIcon Icon="@Icons.Material.Filled.LocalOffer"
                                 Size="Size.Large"
                                 Color="Color.Error" />
                        @if (dashboardData.TotalActiveOffers > 0)
                        {
                            <MudChip Size="Size.Small" Color="Color.Error">
                                @(Localization.IsArabic ? "نشط" : "Live")
                            </MudChip>
                        }
                    </div>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-1">
                        @Localization.Get("dashboard.active_offers")
                    </MudText>
                    <MudText Typo="Typo.h4" Class="font-weight-bold">
                        @dashboardData.TotalActiveOffers.ToString("N0")
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Pending Orders -->
        <MudItem xs="12" sm="6" lg="3">
            <MudCard Elevation="2" Class="stat-card slide-in" Style="animation-delay: 0.8s;">
                <MudCardContent Class="pa-4">
                    <div class="d-flex justify-space-between align-center mb-2">
                        <MudIcon Icon="@Icons.Material.Filled.Schedule"
                                 Size="Size.Large"
                                 Color="Color.Warning" />
                        @if (dashboardData.PendingOrders > 0)
                        {
                            <MudChip Size="Size.Small" Color="Color.Warning">
                                @(Localization.IsArabic ? "يحتاج إجراء" : "Action Needed")
                            </MudChip>
                        }
                    </div>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-1">
                        @Localization.Get("dashboard.pending_orders")
                    </MudText>
                    <MudText Typo="Typo.h4" Class="font-weight-bold">
                        @dashboardData.PendingOrders.ToString("N0")
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Charts & Analytics -->
    <MudGrid Spacing="3" Class="mb-4">
        <!-- Revenue Analysis Chart -->
        <MudItem xs="12" md="8">
            <MudCard Elevation="2" Class="chart-card fade-in">
                <MudCardHeader>
                    <CardHeaderContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.BarChart" Class="mx-2" Color="Color.Success" />
                            <MudText Typo="Typo.h6">
                                @(Localization.IsArabic ? "تحليل الإيرادات" : "Revenue Analysis")
                            </MudText>
                        </div>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudChart ChartType="ChartType.Bar"
                              ChartSeries="@revenueChartSeries"
                              XAxisLabels="@revenueChartLabels"
                              Width="100%"
                              Height="350px"
                              ChartOptions="@revenueChartOptions" />
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Order Status Distribution -->
        <MudItem xs="12" md="4">
            <MudCard Elevation="2" Class="chart-card fade-in">
                <MudCardHeader>
                    <CardHeaderContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.DonutLarge" Class="mx-2" Color="Color.Primary" />
                            <MudText Typo="Typo.h6">
                                @(Localization.IsArabic ? "حالة الطلبات" : "Order Status")
                            </MudText>
                        </div>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudChart ChartType="ChartType.Donut"
                              InputData="@orderStatusData"
                              InputLabels="@orderStatusLabels"
                              Width="100%"
                              Height="350px"
                              LegendPosition="Position.Bottom" />
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Top Selling Products & Recent Orders -->
    <MudGrid Spacing="3">
        <!-- Top Selling Products -->
        <MudItem xs="12" md="6">
            <MudCard Elevation="2" Class="fade-in">
                <MudCardHeader>
                    <CardHeaderContent>
                        <div class="d-flex align-center justify-space-between">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.TrendingUp" Class="mx-2" Color="Color.Warning" />
                                <MudText Typo="Typo.h6">
                                    @(Localization.IsArabic ? "المنتجات الأكثر مبيعاً" : "Top Selling Products")
                                </MudText>
                            </div>
                            @if (dashboardData.TopSellingProducts?.Any() == true)
                            {
                                <MudChip Size="Size.Small" Color="Color.Success">
                                    @dashboardData.TopSellingProducts.Count @(Localization.IsArabic ? "منتج" : "items")
                                </MudChip>
                            }
                        </div>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent Class="pa-0">
                    @if (dashboardData.TopSellingProducts?.Any() == true)
                    {
                        <MudList Clickable="false">
                            @foreach (var product in dashboardData.TopSellingProducts)
                            {
                                <MudListItem>
                                    <div class="d-flex justify-space-between align-center w-100">
                                        <div class="d-flex align-center">
                                            <MudAvatar Color="Color.Primary" Size="Size.Medium" Class="mx-3">
                                                @product.ProductId
                                            </MudAvatar>
                                            <div>
                                                <MudText Typo="Typo.body1" Class="font-weight-medium">
                                                    @product.ProductName
                                                </MudText>
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                    @(Localization.IsArabic ? "تم البيع:" : "Sold:") @product.TotalQuantitySold @(Localization.IsArabic ? "وحدة" : "units")
                                                </MudText>
                                            </div>
                                        </div>
                                        <MudChip Size="Size.Small" Color="Color.Success">
                                            @product.TotalRevenue.ToString("N2") @(Localization.IsArabic ? "ج.م" : "EGP")
                                        </MudChip>
                                    </div>
                                </MudListItem>
                                <MudDivider />
                            }
                        </MudList>
                    }
                    else
                    {
                        <div class="pa-8 text-center">
                            <MudIcon Icon="@Icons.Material.Filled.TrendingDown"
                                     Size="Size.Large"
                                     Color="Color.Secondary"
                                     Class="mb-3" />
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                @(Localization.IsArabic ? "لا توجد بيانات مبيعات حتى الآن" : "No sales data available yet")
                            </MudText>
                        </div>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Order Status Summary -->
        <MudItem xs="12" md="6">
            <MudCard Elevation="2" Class="fade-in">
                <MudCardHeader>
                    <CardHeaderContent>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Assessment" Class="mx-2" Color="Color.Info" />
                            <MudText Typo="Typo.h6">
                                @(Localization.IsArabic ? "إحصائيات الطلبات" : "Order Statistics")
                            </MudText>
                        </div>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Spacing="3">
                        <div class="d-flex justify-space-between align-center">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Schedule" Color="Color.Warning" Class="mx-2" />
                                <MudText Typo="Typo.body2">
                                    @(Localization.IsArabic ? "معلق" : "Pending")
                                </MudText>
                            </div>
                            <MudChip Size="Size.Small" Color="Color.Warning">
                                @dashboardData.OrderStatusSummary.PendingCount
                            </MudChip>
                        </div>
                        <MudDivider />

                        <div class="d-flex justify-space-between align-center">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Inventory" Color="Color.Info" Class="mx-2" />
                                <MudText Typo="Typo.body2">
                                    @(Localization.IsArabic ? "قيد التحضير" : "In Preparation")
                                </MudText>
                            </div>
                            <MudChip Size="Size.Small" Color="Color.Info">
                                @dashboardData.OrderStatusSummary.InPreparationCount
                            </MudChip>
                        </div>
                        <MudDivider />

                        <div class="d-flex justify-space-between align-center">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.LocalShipping" Color="Color.Secondary" Class="mx-2" />
                                <MudText Typo="Typo.body2">
                                    @(Localization.IsArabic ? "في التوصيل" : "Out for Delivery")
                                </MudText>
                            </div>
                            <MudChip Size="Size.Small" Color="Color.Secondary">
                                @dashboardData.OrderStatusSummary.OutForDeliveryCount
                            </MudChip>
                        </div>
                        <MudDivider />

                        <div class="d-flex justify-space-between align-center">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Class="mx-2" />
                                <MudText Typo="Typo.body2">
                                    @(Localization.IsArabic ? "تم التوصيل" : "Delivered")
                                </MudText>
                            </div>
                            <MudChip Size="Size.Small" Color="Color.Success">
                                @dashboardData.OrderStatusSummary.DeliveredCount
                            </MudChip>
                        </div>
                        <MudDivider />

                        <div class="d-flex justify-space-between align-center">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" Class="mx-2" />
                                <MudText Typo="Typo.body2">
                                    @(Localization.IsArabic ? "ملغي" : "Canceled")
                                </MudText>
                            </div>
                            <MudChip Size="Size.Small" Color="Color.Error">
                                @dashboardData.OrderStatusSummary.CanceledCount
                            </MudChip>
                        </div>
                    </MudStack>
                </MudCardContent>
                <MudCardActions Class="pa-4">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true"
                               Href="/orders"
                               StartIcon="@Icons.Material.Filled.ShoppingCart">
                        @(Localization.IsArabic ? "عرض كل الطلبات" : "View All Orders")
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
}
else
{
    <MudCard Elevation="2" Class="fade-in">
        <MudCardContent Class="pa-8">
            <div class="d-flex flex-column align-center text-center">
                <MudIcon Icon="@Icons.Material.Filled.ErrorOutline"
                         Size="Size.Large"
                         Color="Color.Error"
                         Class="mb-4"
                         Style="font-size: 5rem;" />
                <MudText Typo="Typo.h6" Class="mb-2">
                    @(Localization.IsArabic ? "فشل في تحميل لوحة التحكم" : "Failed to Load Dashboard")
                </MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                    @(Localization.IsArabic ? "تعذر تحميل بيانات لوحة التحكم. يرجى المحاولة مرة أخرى." : "Unable to fetch dashboard data. Please try again.")
                </MudText>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="LoadDataAsync"
                           StartIcon="@Icons.Material.Filled.Refresh">
                    @(Localization.IsArabic ? "إعادة المحاولة" : "Retry")
                </MudButton>
            </div>
        </MudCardContent>
    </MudCard>
}

<style>
    .page-header {
        animation: slideInDown 0.5s ease-out;
    }

    .stat-card {
        border-radius: 16px;
        transition: all 0.3s ease;
        height: 100%;
        background: linear-gradient(135deg, var(--mud-palette-surface) 0%, var(--mud-palette-background) 100%);
    }

        .stat-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 12px 28px rgba(0, 0, 0, 0.15) !important;
        }

    .chart-card {
        border-radius: 16px;
        height: 100%;
    }

    .fade-in {
        animation: fadeIn 0.6s ease-in;
    }

    .slide-in {
        animation: slideIn 0.6s ease-out;
        opacity: 0;
        animation-fill-mode: forwards;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes slideInDown {
        from {
            opacity: 0;
            transform: translateY(-30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@media (max-width: 599px) {
        .stat-card {
            margin-bottom: 0.75rem;
        }
    }
</style>

@code {
    private bool isLoading = true;
    private string _userName = "User";
    private DashboardSummaryDto? dashboardData;

    // Revenue Chart
    private List<ChartSeries> revenueChartSeries = new();
    private string[] revenueChartLabels = Array.Empty<string>();
    private ChartOptions revenueChartOptions = new()
        {
            YAxisTicks = 5,
            MaxNumYAxisTicks = 10
        };

    // Order Status Chart
    private double[] orderStatusData = Array.Empty<double>();
    private string[] orderStatusLabels = Array.Empty<string>();

    protected override void OnInitialized()
    {
        Localization.OnLanguageChanged += async () =>
        {
            PrepareRevenueChart();
            PrepareOrderStatusChart();
            await InvokeAsync(StateHasChanged);
        };

        TokenManager.OnUserNameChanged += async () =>
        {
            _userName = await TokenManager.GetUserNameAsync() ?? "User";
            await InvokeAsync(StateHasChanged);
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        var name = await TokenManager.GetUserNameAsync();
        if (!string.IsNullOrWhiteSpace(name))
        {
            _userName = name;
            StateHasChanged();
        }

        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            isLoading = true;
            var apiResponse = await ApiService.GetAsync<ApiService.ApiResponse<DashboardSummaryDto>>("/api/Dashboard/summary");
            dashboardData = apiResponse?.Data;

            if (dashboardData != null)
            {
                PrepareRevenueChart();
                PrepareOrderStatusChart();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void PrepareRevenueChart()
    {
        if (dashboardData?.RevenueAnalysis == null) return;

        revenueChartLabels = Localization.IsArabic
            ? new[] { "اليوم", "هذا الأسبوع", "هذا الشهر", "هذه السنة", "الإجمالي" }
            : new[] { "Today", "This Week", "This Month", "This Year", "Total" };

        revenueChartSeries = new List<ChartSeries>
        {
            new ChartSeries
            {
                Name = Localization.IsArabic ? "الإيرادات (ج.م)" : "Revenue (EGP)",
                Data = new[]
                {
                    (double)dashboardData.RevenueAnalysis.TodayRevenue,
                    (double)dashboardData.RevenueAnalysis.ThisWeekRevenue,
                    (double)dashboardData.RevenueAnalysis.ThisMonthRevenue,
                    (double)dashboardData.RevenueAnalysis.ThisYearRevenue,
                    (double)dashboardData.RevenueAnalysis.TotalRevenue
                }
            }
        };
    }

    private void PrepareOrderStatusChart()
    {
        if (dashboardData?.OrderStatusSummary == null) return;

        var summary = dashboardData.OrderStatusSummary;

        orderStatusLabels = Localization.IsArabic
            ? new[] { "معلق", "قيد التحضير", "في التوصيل", "تم التوصيل", "ملغي" }
            : new[] { "Pending", "In Preparation", "Out for Delivery", "Delivered", "Canceled" };

        orderStatusData = new[]
        {
            (double)summary.PendingCount,
            (double)summary.InPreparationCount,
            (double)summary.OutForDeliveryCount,
            (double)summary.DeliveredCount,
            (double)summary.CanceledCount
        };
    }

    public class DashboardSummaryDto
    {
        [JsonPropertyName("totalUsers")] public int TotalUsers { get; set; }
        [JsonPropertyName("totalProducts")] public int TotalProducts { get; set; }
        [JsonPropertyName("totalCategories")] public int TotalCategories { get; set; }
        [JsonPropertyName("totalActiveOffers")] public int TotalActiveOffers { get; set; }
        [JsonPropertyName("totalOrders")] public int TotalOrders { get; set; }
        [JsonPropertyName("pendingOrders")] public int PendingOrders { get; set; }
        [JsonPropertyName("todayRevenue")] public decimal TodayRevenue { get; set; }
        [JsonPropertyName("monthRevenue")] public decimal MonthRevenue { get; set; }

        [JsonPropertyName("revenueAnalysis")] public RevenueAnalysisDto? RevenueAnalysis { get; set; }
        [JsonPropertyName("topSellingProducts")] public List<TopSellingProductDto>? TopSellingProducts { get; set; }

        [JsonPropertyName("orderStatusSummary")] public OrderStatusSummaryDto? OrderStatusSummary { get; set; }
    }

    public class RevenueAnalysisDto
    {
        [JsonPropertyName("todayRevenue")] public decimal TodayRevenue { get; set; }
        [JsonPropertyName("thisWeekRevenue")] public decimal ThisWeekRevenue { get; set; }
        [JsonPropertyName("thisMonthRevenue")] public decimal ThisMonthRevenue { get; set; }
        [JsonPropertyName("thisYearRevenue")] public decimal ThisYearRevenue { get; set; }
        [JsonPropertyName("totalRevenue")] public decimal TotalRevenue { get; set; }
    }

    public class TopSellingProductDto
    {
        [JsonPropertyName("productId")] public int ProductId { get; set; }
        [JsonPropertyName("productName")] public string ProductName { get; set; } = string.Empty;
        [JsonPropertyName("totalQuantitySold")] public int TotalQuantitySold { get; set; }
        [JsonPropertyName("totalRevenue")] public decimal TotalRevenue { get; set; }
    }

    public class OrderStatusSummaryDto
    {
        [JsonPropertyName("totalOrders")] public int TotalOrders { get; set; }
        [JsonPropertyName("pendingCount")] public int PendingCount { get; set; }

        [JsonPropertyName("inPreparationCount")] public int InPreparationCount { get; set; }
        [JsonPropertyName("outForDeliveryCount")] public int OutForDeliveryCount { get; set; }
        [JsonPropertyName("deliveredCount")] public int DeliveredCount { get; set; }
        [JsonPropertyName("canceledCount")] public int CanceledCount { get; set; }
    }

}