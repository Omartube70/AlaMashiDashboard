@page "/profile"
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject TokenManagerService TokenManager
@inject NavigationManager NavManager
@inject LocalizationService Localization
@using System.Text.RegularExpressions
@using AlaMashiDashboard.Services
@using AdminDashboard.Services

<PageTitle>@Localization.Get("profile.title") - @Localization.Get("app.title")</PageTitle>

<!-- Page Header -->
<div class="page-header mb-4 fade-in">
    <MudText Typo="Typo.h4" Class="font-weight-bold mb-2">
        <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Class="@(_isRtl ? "ml-2" : "mr-2")" />
        @Localization.Get("profile.title")
    </MudText>
    <MudText Typo="Typo.body2" Color="Color.Secondary">
        @Localization.Get("profile.subtitle")
    </MudText>
</div>

@if (isLoading)
{
    <MudCard Elevation="2">
        <MudCardContent Class="pa-8">
            <div class="d-flex flex-column align-center justify-center">
                <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" />
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-4">@Localization.Get("profile.loading")</MudText>
            </div>
        </MudCardContent>
    </MudCard>
}
else if (userProfile != null)
{
    <MudGrid Spacing="3">
        <!-- Personal Information -->
        <MudItem xs="12" md="8">
            <MudCard Elevation="2" Class="slide-in">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@Localization.Get("profile.personal")</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Spacing="3">
                        <MudTextField @bind-Value="userProfile.UserName"
                                      Label="@Localization.Get("profile.username")"
                                      Variant="Variant.Outlined"
                                      Disabled="true"
                                      HelperText="@Localization.Get("profile.username_note")" />

                        <MudTextField @bind-Value="editForm.Email"
                                      Label="@Localization.Get("profile.email")"
                                      Variant="Variant.Outlined"
                                      InputType="InputType.Email"
                                      Validation="@(new Func<string, IEnumerable<string>>(ValidateEmail))" />

                        <MudTextField @bind-Value="editForm.Phone"
                                      Label="@Localization.Get("profile.phone")"
                                      Variant="Variant.Outlined"
                                      InputType="InputType.Text"
                                      Validation="@(new Func<string, IEnumerable<string>>(ValidatePhone))" />

                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            <strong>@Localization.Get("profile.role"):</strong> @GetRoleLabel(userProfile.UserRole)
                        </MudText>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Account Status -->
        <MudItem xs="12" md="4">
            <MudCard Elevation="2" Class="slide-in" Style="animation-delay: 0.1s;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@Localization.Get("profile.account")</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Spacing="2">
                        <div class="d-flex justify-space-between align-center">
                            <MudText Typo="Typo.body2">@Localization.Get("profile.status"):</MudText>
                            <MudChip Color="Color.Success" Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small">
                                @Localization.Get("profile.active")
                            </MudChip>
                        </div>
                        <MudDivider />
                        <div class="d-flex justify-space-between align-center">
                            <MudText Typo="Typo.body2">@Localization.Get("profile.member_since"):</MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                @DateTime.Now.ToString("MMM dd, yyyy")
                            </MudText>
                        </div>
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Change Password -->
        <MudItem xs="12" md="8">
            <MudCard Elevation="2" Class="slide-up">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@Localization.Get("profile.change_password")</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudStack Spacing="3">
                        <MudTextField @bind-Value="passwordForm.CurrentPassword"
                                      Label="@Localization.Get("profile.current_password")"
                                      Variant="Variant.Outlined"
                                      InputType="@(showCurrentPassword? InputType.Text: InputType.Password)"
                                      AdornmentIcon="@(showCurrentPassword? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                      OnAdornmentClick="@((MouseEventArgs e) => showCurrentPassword = !showCurrentPassword)"
                                      Adornment="Adornment.End" />

                        <MudTextField @bind-Value="passwordForm.NewPassword"
                                      Label="@Localization.Get("profile.new_password")"
                                      Variant="Variant.Outlined"
                                      InputType="@(showNewPassword? InputType.Text: InputType.Password)"
                                      AdornmentIcon="@(showNewPassword? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                      OnAdornmentClick="@((MouseEventArgs e) => showNewPassword = !showNewPassword)"
                                      Adornment="Adornment.End"
                                      HelperText="@Localization.Get("profile.password_helper")"
                                      Validation="@(new Func<string, IEnumerable<string>>(ValidatePassword))" />

                        <MudTextField @bind-Value="passwordForm.ConfirmPassword"
                                      Label="@Localization.Get("profile.confirm_password")"
                                      Variant="Variant.Outlined"
                                      InputType="@(showConfirmPassword? InputType.Text: InputType.Password)"
                                      AdornmentIcon="@(showConfirmPassword? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                      OnAdornmentClick="@((MouseEventArgs e) => showConfirmPassword = !showConfirmPassword)"
                                      Adornment="Adornment.End" />
                    </MudStack>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Action Buttons -->
        <MudItem xs="12">
            <div class="d-flex gap-2 @(_isRtl ? "justify-start" : "justify-end")">
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Secondary"
                           OnClick="ResetForm">
                    @Localization.Get("profile.cancel")
                </MudButton>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="UpdateProfile"
                           StartIcon="@Icons.Material.Filled.Save">
                    @Localization.Get("profile.save")
                </MudButton>
            </div>
        </MudItem>
    </MudGrid>
}
else
{
    <MudCard Elevation="2" Class="fade-in">
        <MudCardContent Class="pa-8">
            <div class="d-flex flex-column align-center text-center">
                <MudIcon Icon="@Icons.Material.Filled.ErrorOutline"
                         Size="Size.Large"
                         Color="Color.Error"
                         Class="mb-4"
                         Style="font-size: 5rem;" />
                <MudText Typo="Typo.h6" Class="mb-2">@Localization.Get("profile.error")</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                    @Localization.Get("profile.error_msg")
                </MudText>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="LoadProfileAsync"
                           StartIcon="@Icons.Material.Filled.Refresh">
                    @Localization.Get("common.retry")
                </MudButton>
            </div>
        </MudCardContent>
    </MudCard>
}

<style>
    .page-header {
        animation: slideInDown 0.5s ease-out;
    }

    .fade-in {
        animation: fadeIn 0.5s ease-in;
    }

    .slide-in {
        animation: slideIn 0.5s ease-out;
    }

    .slide-up {
        animation: slideUp 0.5s ease-out;
    }

    @@keyframes slideInDown {
        from {
            opacity: 0;
            transform: translateY(-30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateX(-30px);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* RTL Adjustments */
    [dir="rtl"] .slide-in {
        animation: slideInRTL 0.5s ease-out;
    }

    @@keyframes slideInRTL {
        from {
            opacity: 0;
            transform: translateX(30px);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }
    }
</style>

@code {
    private bool isLoading = true;
    private bool _isRtl => Localization.IsArabic;
    private UserProfileDto userProfile = null!;
    private EditProfileForm editForm = new();
    private ChangePasswordForm passwordForm = new();
    private bool showCurrentPassword, showNewPassword, showConfirmPassword;

    protected override async Task OnInitializedAsync()
    {
        Localization.OnLanguageChanged += async () => await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await LoadProfileAsync();
    }

    private async Task LoadProfileAsync()
    {
        try
        {
            isLoading = true;
            var userId = await TokenManager.GetUserIdAsync();

            if (userId == null)
            {
                NavManager.NavigateTo("/login");
                return;
            }

            var response = await ApiService.GetAsync<ApiService.ApiResponse<UserProfileDto>>(
                $"/api/Users/{userId}");

            userProfile = response?.Data;

            if (userProfile != null)
            {
                editForm.Email = userProfile.Email;
                editForm.Phone = userProfile.Phone;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Localization.Get("common.error")}: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task UpdateProfile()
    {
        try
        {
            // التحقق من أن هناك تغييرات فعلية
            bool emailChanged = editForm.Email != userProfile?.Email;
            bool phoneChanged = editForm.Phone != userProfile?.Phone;
            bool passwordChanged = !string.IsNullOrWhiteSpace(passwordForm.CurrentPassword);

            if (!emailChanged && !phoneChanged && !passwordChanged)
            {
                Snackbar.Add(Localization.Get("profile.no_changes"), Severity.Info);
                return;
            }

            // التحقق من صحة البيانات المتغيرة
            if (emailChanged)
            {
                var emailError = InputValidator.ValidateEmail(editForm.Email);
                if (emailError != null)
                {
                    Snackbar.Add(emailError, Severity.Warning);
                    return;
                }
            }

            if (phoneChanged && !string.IsNullOrWhiteSpace(editForm.Phone))
            {
                var phoneError = ValidatePhone(editForm.Phone).FirstOrDefault();
                if (phoneError != null)
                {
                    Snackbar.Add(phoneError, Severity.Warning);
                    return;
                }
            }

            var userId = await TokenManager.GetUserIdAsync();
            if (userId == null)
            {
                Snackbar.Add(Localization.IsArabic ? "لم يتم العثور على معرف المستخدم" : "User ID not found", Severity.Error);
                return;
            }

            // تحديث المعلومات الشخصية فقط إذا تغيرت
            if (emailChanged || phoneChanged)
            {
                var updateRequest = new
                {
                    email = editForm.Email,
                    phone = editForm.Phone
                };

                var response = await ApiService.PatchAsync<ApiService.ApiResponse<object>>(
                    $"/api/Users/{userId}", updateRequest);

                if (response == null)
                {
                    Snackbar.Add(Localization.IsArabic
                        ? "فشل تحديث الملف الشخصي. يرجى التحقق من البيانات."
                        : "Failed to update profile. Please check your data.", Severity.Error);
                    return;
                }

                if (response.Success == false)
                {
                    Snackbar.Add(response.Message ?? Localization.Get("common.failed"), Severity.Error);
                    return;
                }

                Snackbar.Add(Localization.Get("profile.updated"), Severity.Success);
            }

            // تحديث كلمة المرور إذا تم ملء الحقول
            if (passwordChanged)
            {
                if (passwordForm.NewPassword != passwordForm.ConfirmPassword)
                {
                    Snackbar.Add(Localization.Get("profile.passwords_not_match"), Severity.Warning);
                    return;
                }

                var passwordError = InputValidator.ValidatePassword(passwordForm.NewPassword);
                if (passwordError != null)
                {
                    Snackbar.Add(passwordError, Severity.Warning);
                    return;
                }

                var changePasswordRequest = new
                {
                    currentPassword = passwordForm.CurrentPassword,
                    newPassword = passwordForm.NewPassword
                };

                var passwordResponse = await ApiService.PostAsync<ApiService.ApiResponse<object>>(
                    "/api/Users/change-password", changePasswordRequest);

                if (passwordResponse == null || passwordResponse.Success == false)
                {
                    Snackbar.Add(passwordResponse?.Message ?? Localization.Get("common.failed"), Severity.Error);
                    return;
                }

                Snackbar.Add(Localization.Get("profile.password_updated"), Severity.Success);
            }

            ResetForm();
            await LoadProfileAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Localization.Get("common.error")}: {ex.Message}", Severity.Error);
        }
    }

    private void ResetForm()
    {
        if (userProfile != null)
        {
            editForm.Email = userProfile.Email;
            editForm.Phone = userProfile.Phone;
        }
        passwordForm = new();
        showCurrentPassword = showNewPassword = showConfirmPassword = false;
    }

    private string GetRoleLabel(string role)
    {
        return role switch
        {
            "Admin" => Localization.Get("users.admin"),
            "User" => Localization.Get("users.user"),
            _ => role
        };
    }

    private IEnumerable<string> ValidateEmail(string email)
    {
        var error = InputValidator.ValidateEmail(email);
        if (error != null)
            yield return error;
    }

    private IEnumerable<string> ValidatePhone(string phone)
    {
        if (!string.IsNullOrWhiteSpace(phone))
        {
            if (!Regex.IsMatch(phone, @"^\d{10,}$"))
                yield return Localization.IsArabic
                    ? "يجب أن يحتوي الهاتف على 10 أرقام على الأقل"
                    : "Phone must be at least 10 digits";
        }
    }

    private IEnumerable<string> ValidatePassword(string password)
    {
        var error = InputValidator.ValidatePassword(password);
        if (error != null)
            yield return error;
    }

    public class UserProfileDto
    {
        [JsonPropertyName("userId")] public int UserId { get; set; }
        [JsonPropertyName("userName")] public string UserName { get; set; } = string.Empty;
        [JsonPropertyName("email")] public string Email { get; set; } = string.Empty;
        [JsonPropertyName("phone")] public string Phone { get; set; } = string.Empty;
        [JsonPropertyName("userRole")] public string UserRole { get; set; } = string.Empty;
    }

    public class EditProfileForm
    {
        public string Email { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
    }

    public class ChangePasswordForm
    {
        public string CurrentPassword { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}