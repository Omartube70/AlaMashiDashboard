@page "/Products"
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject LocalizationService Localization
@using AlaMashi.AdminDashboard.Components.Dialogs

<PageTitle>@Localization.Get("products.title")</PageTitle>

<!-- Page Header -->
<div class="page-header mb-4 slide-in">
    <div class="d-flex justify-space-between align-center flex-wrap">
        <div>
            <MudText Typo="Typo.h4" Class="font-weight-bold mb-1">🛍️ @Localization.Get("products.title")</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">@Localization.Get("products.subtitle")</MudText>
        </div>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="OpenAddDialog"
                   Class="mt-2 mt-md-0 pulse-button">
            @Localization.Get("products.add")
        </MudButton>
    </div>
</div>

@if (isLoading)
{
    <MudCard Elevation="2" Class="fade-in">
        <MudCardContent>
            <div class="d-flex flex-column justify-center align-center pa-8">
                <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" />
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-4">@Localization.Get("common.loading")</MudText>
            </div>
        </MudCardContent>
    </MudCard>
}
else if (productsList != null && productsList.Any())
{
    <MudCard Elevation="2" Class="data-table-card fade-in">
        <MudCardContent Class="pa-0">
            <MudTable Items="@GetFilteredProducts()"
                      Hover="true"
                      Breakpoint="Breakpoint.Sm"
                      FixedHeader="true"
                      Height="calc(100vh - 320px)"
                      Class="custom-table">

                <ToolBarContent>
                    <MudTextField @bind-Value="_searchString"
                                  Placeholder="@Localization.Get("common.search")"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Immediate="true"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Class="@(_isRtl ? "ml-2" : "mr-2")"
                                  Style="max-width: 400px;" />
                    <MudSpacer />
                    <MudTooltip Text="@Localization.Get("common.refresh")">
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                                       OnClick="LoadDataAsync"
                                       Color="Color.Primary" />
                    </MudTooltip>
                    <MudTooltip Text="@Localization.Get("common.filter")">
                        <MudIconButton Icon="@Icons.Material.Filled.FilterList"
                                       Color="Color.Secondary" />
                    </MudTooltip>
                    <MudTooltip Text="@Localization.Get("common.export")">
                        <MudIconButton Icon="@Icons.Material.Filled.FileDownload"
                                       Color="Color.Info" />
                    </MudTooltip>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ProductDto, object>(x => x.ProductID)">
                            @Localization.Get("products.id")
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>@Localization.Get("products.name")</MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ProductDto, object>(x => x.Price)">
                            @Localization.Get("products.price")
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ProductDto, object>(x => x.QuantityInStock)">
                            @Localization.Get("products.stock")
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>@Localization.Get("products.category")</MudTh>
                    <MudTh Style="text-align: right;">@Localization.Get("common.actions")</MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="@Localization.Get("products.id")">
                        <MudChip Size="Size.Small" Color="Color.Default">@context.ProductID</MudChip>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("products.name")">
                        <div class="d-flex align-center">
                            @if (!string.IsNullOrEmpty(context.MainImageURL))
                            {
                                <MudAvatar Image="@context.MainImageURL"
                                           Size="Size.Medium"
                                           Class="@(_isRtl ? "ml-3" : "mr-3")"
                                           Style="border-radius: 8px;" />
                            }
                            else
                            {
                                <MudAvatar Color="Color.Secondary"
                                           Size="Size.Medium"
                                           Class="@(_isRtl ? "ml-3" : "mr-3")"
                                           Style="border-radius: 8px;">
                                    <MudIcon Icon="@Icons.Material.Filled.ShoppingBag" />
                                </MudAvatar>
                            }
                            <div>
                                <MudText Typo="Typo.body2" Class="font-weight-medium">@context.ProductName</MudText>
                                @if (!string.IsNullOrEmpty(context.ProductDescription))
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        @(context.ProductDescription.Length > 30 ? context.ProductDescription.Substring(0, 30) + "..." : context.ProductDescription)
                                    </MudText>
                                }
                            </div>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("products.price")">
                        <MudChip Size="Size.Small"
                                 Color="Color.Success"
                                 Icon="@Icons.Material.Filled.AttachMoney"
                                 Style="font-weight: bold;">
                            @context.Price.ToString("N2")
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("products.stock")">
                        @if (context.QuantityInStock > 50)
                        {
                            <MudChip Size="Size.Small"
                                     Color="Color.Success"
                                     Icon="@Icons.Material.Filled.Inventory">
                                @context.QuantityInStock
                            </MudChip>
                        }
                        else if (context.QuantityInStock > 10)
                        {
                            <MudChip Size="Size.Small"
                                     Color="Color.Warning"
                                     Icon="@Icons.Material.Filled.Inventory2">
                                @context.QuantityInStock
                            </MudChip>
                        }
                        else
                        {
                            <MudChip Size="Size.Small"
                                     Color="Color.Error"
                                     Icon="@Icons.Material.Filled.WarningAmber">
                                @context.QuantityInStock
                            </MudChip>
                        }
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("products.category")">
                        <MudChip Size="Size.Small"
                                 Color="Color.Info"
                                 Icon="@Icons.Material.Filled.Category">
                            @context.CategoryName
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("common.actions")" Style="text-align: right;">
                        <MudTooltip Text="@Localization.Get("common.view")">
                            <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                                           Size="Size.Small"
                                           Color="Color.Default"
                                           OnClick="@(() => ViewProduct(context))" />
                        </MudTooltip>
                        <MudTooltip Text="@Localization.Get("common.edit")">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           Size="Size.Small"
                                           Color="Color.Info"
                                           OnClick="@(() => OpenEditDialog(context))" />
                        </MudTooltip>
                        <MudTooltip Text="@Localization.Get("common.delete")">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Size="Size.Small"
                                           Color="Color.Error"
                                           OnClick="@(() => DeleteProduct(context))" />
                        </MudTooltip>
                    </MudTd>
                </RowTemplate>

                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                </PagerContent>
            </MudTable>
        </MudCardContent>
    </MudCard>

    <!-- Stats Footer -->
    <MudPaper Class="pa-3 mt-3 slide-up" Elevation="1">
        <div class="d-flex justify-space-between align-center flex-wrap gap-2">
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                <MudIcon Icon="@Icons.Material.Filled.Inventory" Size="Size.Small" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                @Localization.Get("products.total"): <strong>@productsList.Count</strong>
            </MudText>
            <MudText Typo="Typo.body2" Color="Color.Success">
                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                @Localization.Get("products.in_stock"): <strong>@productsList.Count(p => p.QuantityInStock > 0)</strong>
            </MudText>
            <MudText Typo="Typo.body2" Color="Color.Error">
                <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Small" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                @Localization.Get("products.low_stock"): <strong>@productsList.Count(p => p.QuantityInStock > 0 && p.QuantityInStock <= 10)</strong>
            </MudText>
            <MudText Typo="Typo.body2" Color="Color.Default">
                <MudIcon Icon="@Icons.Material.Filled.RemoveCircle" Size="Size.Small" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                @Localization.Get("products.out_stock"): <strong>@productsList.Count(p => p.QuantityInStock == 0)</strong>
            </MudText>
        </div>
    </MudPaper>
}
else
{
    <MudCard Elevation="2" Class="fade-in">
        <MudCardContent Class="pa-8">
            <div class="d-flex flex-column align-center text-center">
                <MudIcon Icon="@Icons.Material.Filled.ProductionQuantityLimits"
                         Size="Size.Large"
                         Color="Color.Secondary"
                         Class="mb-4 pulse-icon"
                         Style="font-size: 5rem;" />
                <MudText Typo="Typo.h6" Class="mb-2">@Localization.Get("products.empty")</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                    @Localization.Get("products.empty_msg")
                </MudText>
                <div class="d-flex gap-2">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="OpenAddDialog"
                               StartIcon="@Icons.Material.Filled.Add">
                        @Localization.Get("products.add")
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Secondary"
                               OnClick="LoadDataAsync"
                               StartIcon="@Icons.Material.Filled.Refresh">
                        @Localization.Get("common.retry")
                    </MudButton>
                </div>
            </div>
        </MudCardContent>
    </MudCard>
}

<style>
    .page-header {
        animation: slideInDown 0.5s ease-out;
    }

    .fade-in {
        animation: fadeIn 0.5s ease-in;
    }

    .slide-in {
        animation: slideInLeft 0.5s ease-out;
    }

    .slide-up {
        animation: slideUp 0.5s ease-out;
    }

    .pulse-button {
        animation: pulse 2s infinite;
    }

    .pulse-icon {
        animation: pulse 3s infinite;
    }

    .data-table-card {
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    }

    ::deep .mud-table-row:hover {
        background-color: rgba(16, 185, 129, 0.05) !important;
        transform: scale(1.01);
    }

    @@keyframes slideInDown {
        from {
            opacity: 0;
            transform: translateY(-30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @@keyframes slideInLeft {
        from {
            opacity: 0;
            transform: translateX(-30px);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes pulse {
        0%, 100% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.05);
        }
    }
</style>

@code {
    private bool isLoading = true;
    private bool _isRtl => Localization.IsArabic;
    private List<ProductDto>? productsList;
    private string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        Localization.OnLanguageChanged += async () => await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        productsList = null;
        isLoading = true;
        StateHasChanged();

        try
        {
            var products = await ApiService.GetAsync<ApiService.ApiResponse<List<ProductDto>>>("/api/Products/all");
            productsList = products?.Data;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private IEnumerable<ProductDto> GetFilteredProducts()
    {
        if (productsList == null) return Enumerable.Empty<ProductDto>();
        if (string.IsNullOrWhiteSpace(_searchString)) return productsList;

        return productsList.Where(p =>
            p.ProductName.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
            p.CategoryName.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
            p.ProductDescription.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
            p.ProductID.ToString().Contains(_searchString)
        );
    }

    private async Task OpenAddDialog()
    {
        var dialog = await DialogService.ShowAsync<AddProductDialog>(
            Localization.Get("products.add"),
            new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = false
            });

        var result = await dialog.Result;
        if (!result.Canceled) await LoadDataAsync();
    }

    private void OpenEditDialog(ProductDto product)
    {
        Snackbar.Add(Localization.IsArabic
            ? $"ميزة التعديل لـ {product.ProductName} - قريباً"
            : $"Edit feature for {product.ProductName} - Coming soon", Severity.Info);
    }

    private void ViewProduct(ProductDto product)
    {
        Snackbar.Add(Localization.IsArabic
            ? $"عرض: {product.ProductName}"
            : $"Viewing: {product.ProductName}", Severity.Info);
    }

    private async Task DeleteProduct(ProductDto product)
    {
        var confirmed = await DialogService.ShowMessageBox(
            Localization.Get("common.delete"),
            Localization.IsArabic
                ? $"هل أنت متأكد من حذف '{product.ProductName}'؟ لا يمكن التراجع عن هذا الإجراء."
                : $"Are you sure you want to delete '{product.ProductName}'? This action cannot be undone.",
            yesText: Localization.Get("common.delete"),
            cancelText: Localization.Get("common.cancel"));

        if (confirmed != true) return;

        try
        {
            var deleted = await ApiService.DeleteAsync($"/api/Products/{product.ProductID}");
            if (deleted)
            {
                Snackbar.Add(Localization.IsArabic
                    ? $"تم حذف المنتج '{product.ProductName}' بنجاح!"
                    : $"Product '{product.ProductName}' deleted successfully!", Severity.Success);
                await LoadDataAsync();
            }
            else
            {
                Snackbar.Add(Localization.Get("common.failed"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    public class ProductDto
    {
        [JsonPropertyName("productID")] public int ProductID { get; set; }
        [JsonPropertyName("productName")] public string ProductName { get; set; } = string.Empty;
        [JsonPropertyName("price")] public decimal Price { get; set; }
        [JsonPropertyName("quantityInStock")] public int QuantityInStock { get; set; }
        [JsonPropertyName("mainImageURL")] public string MainImageURL { get; set; } = string.Empty;
        [JsonPropertyName("categoryName")] public string CategoryName { get; set; } = string.Empty;
        [JsonPropertyName("productDescription")] public string ProductDescription { get; set; } = string.Empty;
    }
}