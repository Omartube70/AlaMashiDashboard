@page "/addresses"
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject LocalizationService Localization
@using AdminDashboard.Services
@using AlaMashi.AdminDashboard.Components.Dialogs
@inject IDialogService DialogService

<PageTitle>@Localization.Get("addresses.title")</PageTitle>

<!-- Page Header -->
<div class="page-header mb-4 slide-in">
    <div class="d-flex justify-space-between align-center flex-wrap">
        <div>
            <MudText Typo="Typo.h4" Class="font-weight-bold mb-1">
                <MudIcon Icon="@Icons.Material.Filled.LocationOn" Class="@(_isRtl ? "ml-2" : "mr-2")" />
                @Localization.Get("addresses.title")
            </MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">@Localization.Get("addresses.subtitle")</MudText>
        </div>
        <div class="d-flex gap-2 mt-2 mt-md-0">
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Secondary"
                       StartIcon="@Icons.Material.Filled.Refresh"
                       OnClick="LoadDataAsync">
                @Localization.Get("common.refresh")
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Success"
                       StartIcon="@Icons.Material.Filled.FileDownload"
                       OnClick="ExportToCSV"
                       Disabled="@(addressesList == null || !addressesList.Any())">
                @Localization.Get("common.export")
            </MudButton>
        </div>
    </div>
</div>

<!-- Filter Chips -->
<MudPaper Class="pa-3 mb-4 slide-up" Elevation="1">
    <div class="d-flex flex-wrap gap-2 align-center">
        <MudText Typo="Typo.body2" Class="@(_isRtl ? "ml-2" : "mr-2")">
            @Localization.Get("common.filter"):
        </MudText>
        <MudChip Color="@(_typeFilter == null ? Color.Primary : Color.Default)"
                 OnClick="@(() => FilterByType(null))"
                 Size="Size.Small">
            @Localization.Get("common.all") (@(addressesList?.Count ?? 0))
        </MudChip>
        <MudChip Color="@(_typeFilter == 1 ? Color.Info : Color.Default)"
                 OnClick="@(() => FilterByType(1))"
                 Size="Size.Small"
                 Icon="@Icons.Material.Filled.Home">
            @Localization.Get("addresses.home") (@GetTypeCount(1))
        </MudChip>
        <MudChip Color="@(_typeFilter == 2 ? Color.Warning : Color.Default)"
                 OnClick="@(() => FilterByType(2))"
                 Size="Size.Small"
                 Icon="@Icons.Material.Filled.Work">
            @Localization.Get("addresses.work") (@GetTypeCount(2))
        </MudChip>
        <MudChip Color="@(_typeFilter == 3 ? Color.Secondary : Color.Default)"
                 OnClick="@(() => FilterByType(3))"
                 Size="Size.Small"
                 Icon="@Icons.Material.Filled.Place">
            @Localization.Get("addresses.other") (@GetTypeCount(3))
        </MudChip>
    </div>
</MudPaper>

@if (isLoading)
{
    <MudCard Elevation="2" Class="fade-in">
        <MudCardContent>
            <div class="d-flex flex-column justify-center align-center pa-8">
                <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" />
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-4">@Localization.Get("common.loading")</MudText>
            </div>
        </MudCardContent>
    </MudCard>
}
else if (addressesList != null && addressesList.Any())
{
    <MudCard Elevation="2" Class="data-table-card fade-in">
        <MudCardContent Class="pa-0">
            <MudTable Items="@GetFilteredAddresses()"
                      Hover="true"
                      Breakpoint="Breakpoint.Sm"
                      FixedHeader="true"
                      Height="calc(100vh - 400px)"
                      Class="custom-table">

                <ToolBarContent>
                    <MudTextField @bind-Value="_searchString"
                                  Placeholder="@Localization.Get("common.search")"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Immediate="true"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Class="@(_isRtl ? "ml-2" : "mr-2")"
                                  Style="max-width: 400px;" />
                    <MudSpacer />
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        @Localization.Get("common.showing") <strong>@GetFilteredAddresses().Count()</strong> @Localization.Get("common.of") <strong>@addressesList.Count</strong>
                    </MudText>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<AddressDto, object>(x => x.AddressId)">@Localization.Get("addresses.id")</MudTableSortLabel></MudTh>
                    <MudTh>@Localization.Get("addresses.user")</MudTh>
                    <MudTh>@Localization.Get("addresses.city")</MudTh>
                    <MudTh>@Localization.Get("addresses.street")</MudTh>
                    <MudTh>@Localization.Get("addresses.details")</MudTh>
                    <MudTh>@Localization.Get("addresses.type")</MudTh>
                    <MudTh Style="text-align: right;">@Localization.Get("common.actions")</MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="@Localization.Get("addresses.id")">
                        <MudChip Size="Size.Small" Color="Color.Default">#@context.AddressId</MudChip>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("addresses.user")">
                        <div class="d-flex align-center">
                            <MudAvatar Size="Size.Small" Color="Color.Primary" Class="@(_isRtl ? "ml-2" : "mr-2")">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" />
                            </MudAvatar>
                            <MudText Typo="Typo.body2" Class="font-weight-medium">
                                @(Localization.IsArabic ? "مستخدم" : "User") #@context.UserId
                            </MudText>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("addresses.city")">
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.LocationCity" Size="Size.Small" Color="Color.Info" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                            <MudText Typo="Typo.body2">@context.City</MudText>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("addresses.street")">
                        <MudText Typo="Typo.body2" Color="Color.Secondary">@context.Street</MudText>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("addresses.details")">
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            @(context.AddressDetails.Length > 30 ? context.AddressDetails.Substring(0, 30) + "..." : context.AddressDetails)
                        </MudText>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("addresses.type")">
                        <MudChip Size="Size.Small"
                                 Color="@GetTypeColor(context.AddressType)"
                                 Icon="@GetTypeIcon(context.AddressType)">
                            @GetTypeLabel(context.AddressType)
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("common.actions")" Style="text-align: right;">
                        <MudTooltip Text="@Localization.Get("common.view")">
                            <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                                           Size="Size.Small"
                                           Color="Color.Default"
                                           OnClick="@(() => ViewAddressDetails(context.AddressId))" />
                        </MudTooltip>
                        <MudTooltip Text="@Localization.Get("addresses.map")">
                            <MudIconButton Icon="@Icons.Material.Filled.Map"
                                           Size="Size.Small"
                                           Color="Color.Default"
                                           OnClick="@(() => ViewOnMap(context))" />
                        </MudTooltip>
                        <MudTooltip Text="@Localization.Get("common.edit")">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           Size="Size.Small"
                                           Color="Color.Info"
                                           OnClick="@(() => EditAddress(context))" />
                        </MudTooltip>
                        <MudTooltip Text="@Localization.Get("common.delete")">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Size="Size.Small"
                                           Color="Color.Error"
                                           OnClick="@(() => DeleteAddress(context))" />
                        </MudTooltip>
                    </MudTd>
                </RowTemplate>

                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                </PagerContent>
            </MudTable>
        </MudCardContent>
    </MudCard>

    <!-- Stats Footer -->
    <MudPaper Class="pa-3 mt-3 slide-up" Elevation="1">
        <MudGrid>
            <MudItem xs="6" sm="4">
                <MudText Typo="Typo.body2" Color="Color.Info">
                    <MudIcon Icon="@Icons.Material.Filled.Home" Size="Size.Small" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                    @Localization.Get("addresses.home"): <strong>@GetTypeCount(1)</strong>
                </MudText>
            </MudItem>
            <MudItem xs="6" sm="4">
                <MudText Typo="Typo.body2" Color="Color.Warning">
                    <MudIcon Icon="@Icons.Material.Filled.Work" Size="Size.Small" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                    @Localization.Get("addresses.work"): <strong>@GetTypeCount(2)</strong>
                </MudText>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    <MudIcon Icon="@Icons.Material.Filled.Place" Size="Size.Small" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                    @Localization.Get("addresses.other"): <strong>@GetTypeCount(3)</strong>
                </MudText>
            </MudItem>
        </MudGrid>
    </MudPaper>
}
else
{
    <MudCard Elevation="2" Class="fade-in">
        <MudCardContent Class="pa-8">
            <div class="d-flex flex-column align-center text-center">
                <MudIcon Icon="@Icons.Material.Filled.LocationOff"
                         Size="Size.Large"
                         Color="Color.Secondary"
                         Class="mb-4 pulse-icon"
                         Style="font-size: 5rem;" />
                <MudText Typo="Typo.h6" Class="mb-2">@Localization.Get("addresses.empty")</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                    @Localization.Get("addresses.empty_msg")
                </MudText>
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Secondary"
                           OnClick="LoadDataAsync"
                           StartIcon="@Icons.Material.Filled.Refresh">
                    @Localization.Get("common.retry")
                </MudButton>
            </div>
        </MudCardContent>
    </MudCard>
}

<style>
    .page-header {
        animation: slideInDown 0.5s ease-out;
    }

    .fade-in {
        animation: fadeIn 0.5s ease-in;
    }

    .slide-in {
        animation: slideInLeft 0.5s ease-out;
    }

    .slide-up {
        animation: slideUp 0.5s ease-out;
    }

    .pulse-icon {
        animation: pulse 3s infinite;
    }

    .data-table-card {
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    }

    ::deep .mud-table-row:hover {
        background-color: rgba(22, 163, 74, 0.05) !important;
        transform: scale(1.01);
    }

    @@keyframes slideInDown {
        from

    {
        opacity: 0;
        transform: translateY(-30px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }
    @@keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }

    @@keyframes slideInLeft {
        from

    {
        opacity: 0;
        transform: translateX(-30px);
    }

    to {
        opacity: 1;
        transform: translateX(0);
    }

    }
    @@keyframes slideUp {
        from

    {
        opacity: 0;
        transform: translateY(30px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }
    @@keyframes pulse {
        0%, 100%

    {
        transform: scale(1);
    }

    50% {
        transform: scale(1.05);
    }

    }
</style>

@code {
    private bool isLoading = true;
    private bool _isRtl => Localization.IsArabic;
    private List<AddressDto>? addressesList;
    private string _searchString = "";
    private int? _typeFilter = null;

    protected override async Task OnInitializedAsync()
    {
        Localization.OnLanguageChanged += async () => await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var response = await ApiService.GetAsync<ApiService.ApiResponse<List<AddressDto>>>("/api/Addresses/all");
            addressesList = response?.Data;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Localization.Get("common.error")}: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private IEnumerable<AddressDto> GetFilteredAddresses()
    {
        if (addressesList == null) return Enumerable.Empty<AddressDto>();

        var filtered = addressesList.AsEnumerable();

        if (_typeFilter != null)
            filtered = filtered.Where(a => a.AddressType == _typeFilter);

        if (!string.IsNullOrWhiteSpace(_searchString))
            filtered = filtered.Where(a =>
                a.AddressId.ToString().Contains(_searchString) ||
                a.City.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                a.Street.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                a.AddressDetails.Contains(_searchString, StringComparison.OrdinalIgnoreCase));

        return filtered;
    }

    private void FilterByType(int? type) => _typeFilter = type;

    private int GetTypeCount(int type) => addressesList?.Count(a => a.AddressType == type) ?? 0;

    private Color GetTypeColor(int type) => type switch
    {
        1 => Color.Info,
        2 => Color.Warning,
        _ => Color.Secondary
    };

    private string GetTypeIcon(int type) => type switch
    {
        1 => Icons.Material.Filled.Home,
        2 => Icons.Material.Filled.Work,
        _ => Icons.Material.Filled.Place
    };

    private string GetTypeLabel(int type)
    {
        return type switch
        {
            1 => Localization.Get("addresses.home"),
            2 => Localization.Get("addresses.work"),
            3 => Localization.Get("addresses.other"),
            _ => "Unknown"
        };
    }

    private void ViewOnMap(AddressDto address)
    {
        Snackbar.Add(Localization.IsArabic
            ? $"فتح الخريطة لـ: {address.City}, {address.Street}"
            : $"Opening map for: {address.City}, {address.Street}", Severity.Info);
    }

    private async Task ViewAddressDetails(int addressId)
    {
        try
        {
            var response = await ApiService.GetAsync<ApiService.ApiResponse<AddressDetailsDialog.AddressDetailsDto>>($"/api/Addresses/{addressId}");

            if (response?.Data != null)
            {
                var parameters = new DialogParameters { ["AddressDetails"] = response.Data };
                await DialogService.ShowAsync<AddressDetailsDialog>(
                    Localization.Get("dialog.address_details"),
                    parameters,
                    new DialogOptions
                    {
                        MaxWidth = MaxWidth.Medium,
                        FullWidth = true
                    });
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Localization.Get("common.error")}: {ex.Message}", Severity.Error);
        }
    }

    private async Task EditAddress(AddressDto address)
    {
        var parameters = new DialogParameters
        {
            ["AddressId"] = address.AddressId,
            ["Street"] = address.Street,
            ["City"] = address.City,
            ["AddressDetails"] = address.AddressDetails,
            ["AddressType"] = address.AddressType
        };

        var dialog = await DialogService.ShowAsync<EditAddressDialog>(
            Localization.Get("dialog.edit_address"),
            parameters,
            new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = false
            });

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadDataAsync();
        }
    }

    private async Task DeleteAddress(AddressDto address)
    {
        var addressDto = new DeleteAddressDialog.AddressDto
        {
            AddressId = address.AddressId,
            UserName = "", // You may need to fetch username if available
            City = address.City,
            Street = address.Street,
            AddressDetails = address.AddressDetails,
            AddressType = address.AddressType.ToString()
        };
        
        var parameters = new DialogParameters
        {
            ["Address"] = addressDto
        };

        var dialog = await DialogService.ShowAsync<DeleteAddressDialog>(
            Localization.Get("dialog.delete_address"),
            parameters,
            new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = true
            });

        var result = await dialog.Result;
        
        if (result.Canceled || result.Data is not DeleteAddressDialog.DeleteAddressResult deleteResult || !deleteResult.Confirmed)
            return;

        // Here you would typically validate the admin password before proceeding
        // For now, we'll proceed with the deletion
        try
        {
            await ApiService.DeleteAsync($"/api/Addresses/{address.AddressId}");
            Snackbar.Add(Localization.IsArabic
                ? $"تم حذف العنوان #{address.AddressId} بنجاح!"
                : $"Address #{address.AddressId} deleted successfully!", Severity.Success);
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Localization.Get("common.error")}: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportToCSV()
    {
        if (addressesList == null || !addressesList.Any()) return;

        var filtered = GetFilteredAddresses().ToList();
        var csv = new System.Text.StringBuilder();
        csv.AppendLine("Address ID,User ID,City,Street,Details,Type");

        foreach (var address in filtered)
        {
            csv.AppendLine($"{address.AddressId},{address.UserId},{address.City},{address.Street},{address.AddressDetails},{address.AddressType}");
        }

        var bytes = System.Text.Encoding.UTF8.GetBytes(csv.ToString());
        var base64 = Convert.ToBase64String(bytes);
        await JS.InvokeVoidAsync("eval", $"(function(){{var a=document.createElement('a');a.href='data:text/csv;base64,{base64}';a.download='Addresses_{DateTime.Now:yyyyMMdd_HHmmss}.csv';a.click();}})()");

        Snackbar.Add(Localization.IsArabic
            ? $"تم تصدير {filtered.Count} عنوان بنجاح!"
            : $"Exported {filtered.Count} addresses successfully!", Severity.Success);
    }

    public class AddressDto
    {
        [JsonPropertyName("addressId")] public int AddressId { get; set; }
        [JsonPropertyName("street")] public string Street { get; set; } = string.Empty;
        [JsonPropertyName("city")] public string City { get; set; } = string.Empty;
        [JsonPropertyName("addressDetails")] public string AddressDetails { get; set; } = string.Empty;
        [JsonPropertyName("addressType")] public int AddressType { get; set; }
        [JsonPropertyName("userId")] public int UserId { get; set; }
    }
}