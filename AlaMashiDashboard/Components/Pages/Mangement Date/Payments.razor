@page "/payments"
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject IDialogService DialogService
@inject LocalizationService Localization
@using AdminDashboard.Services
@using AlaMashiDashboard.Services
@using AlaMashi.AdminDashboard.Components.Dialogs

<PageTitle>@Localization.Get("payments.title")</PageTitle>

<!-- Page Header -->
<div class="page-header mb-4 slide-in">
    <div class="d-flex justify-space-between align-center flex-wrap">
        <div>
            <MudText Typo="Typo.h4" Class="font-weight-bold mb-1">
                <MudIcon Icon="@Icons.Material.Filled.Payment" Class="@(_isRtl ? "ml-2" : "mr-2")" />
                @Localization.Get("payments.title")
            </MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">@Localization.Get("payments.subtitle")</MudText>
        </div>
        <div class="d-flex gap-2 mt-2 mt-md-0">
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Secondary"
                       StartIcon="@Icons.Material.Filled.Refresh"
                       OnClick="LoadDataAsync">
                @Localization.Get("common.refresh")
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Success"
                       StartIcon="@Icons.Material.Filled.FileDownload"
                       OnClick="ExportToCSV"
                       Disabled="@(paymentsList == null || !paymentsList.Any())">
                @Localization.Get("common.export")
            </MudButton>
        </div>
    </div>
</div>

<!-- Filter Chips -->
<MudPaper Class="pa-3 mb-4 slide-up" Elevation="1">
    <div class="d-flex flex-wrap gap-2 align-center">
        <MudText Typo="Typo.body2" Class="@(_isRtl ? "ml-2" : "mr-2")">@Localization.Get("payments.filter_status")</MudText>
        <MudChip Color="@(_statusFilter == null ? Color.Primary : Color.Default)"
                 OnClick="@(() => FilterByStatus(null))"
                 Size="Size.Small">
            @Localization.Get("payments.all_payments") (@(paymentsList?.Count ?? 0))
        </MudChip>
        <MudChip Color="@(_statusFilter == "Pending" ? Color.Warning : Color.Default)"
                 OnClick="@(() => FilterByStatus("Pending"))"
                 Size="Size.Small"
                 Icon="@Icons.Material.Filled.Schedule">
            @Localization.Get("payments.pending") (@GetStatusCount("Pending"))
        </MudChip>
        <MudChip Color="@(_statusFilter == "Completed" ? Color.Success : Color.Default)"
                 OnClick="@(() => FilterByStatus("Completed"))"
                 Size="Size.Small"
                 Icon="@Icons.Material.Filled.CheckCircle">
            @Localization.Get("payments.completed") (@GetStatusCount("Completed"))
        </MudChip>
        <MudChip Color="@(_statusFilter == "Failed" ? Color.Error : Color.Default)"
                 OnClick="@(() => FilterByStatus("Failed"))"
                 Size="Size.Small"
                 Icon="@Icons.Material.Filled.Error">
            @Localization.Get("payments.failed") (@GetStatusCount("Failed"))
        </MudChip>
        <MudChip Color="@(_statusFilter == "Canceled" ? Color.Default : Color.Default)"
                 OnClick="@(() => FilterByStatus("Canceled"))"
                 Size="Size.Small"
                 Icon="@Icons.Material.Filled.Cancel">
            @Localization.Get("payments.canceled") (@GetStatusCount("Canceled"))
        </MudChip>
    </div>
</MudPaper>

@if (isLoading)
{
    <MudCard Elevation="2" Class="fade-in">
        <MudCardContent>
            <div class="d-flex flex-column justify-center align-center pa-8">
                <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" />
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-4">@Localization.Get("payments.loading")</MudText>
            </div>
        </MudCardContent>
    </MudCard>
}
else if (paymentsList != null && paymentsList.Any())
{
    <MudCard Elevation="2" Class="data-table-card fade-in">
        <MudCardContent Class="pa-0">
            <MudTable Items="@GetFilteredPayments()"
                      Hover="true"
                      Breakpoint="Breakpoint.Sm"
                      FixedHeader="true"
                      Height="calc(100vh - 400px)"
                      Class="custom-table">

                <ToolBarContent>
                    <MudTextField @bind-Value="_searchString"
                                  Placeholder="@Localization.Get("common.search")"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Immediate="true"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Class="@(_isRtl ? "ml-2" : "mr-2")"
                                  Style="max-width: 400px;" />
                    <MudSpacer />
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        @Localization.Get("payments.showing") <strong>@GetFilteredPayments().Count()</strong> @Localization.Get("payments.of") <strong>@paymentsList.Count</strong> @Localization.Get("payments.payments")
                    </MudText>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<PaymentDto, object>(x => x.PaymentId)">@Localization.Get("payments.payment_id")</MudTableSortLabel></MudTh>
                    <MudTh>@Localization.Get("payments.transaction_id")</MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<PaymentDto, object>(x => x.Amount)">@Localization.Get("payments.amount")</MudTableSortLabel></MudTh>
                    <MudTh>@Localization.Get("payments.payment_method")</MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<PaymentDto, object>(x => x.PaymentDate)">@Localization.Get("payments.payment_date")</MudTableSortLabel></MudTh>
                    <MudTh>@Localization.Get("payments.payment_status")</MudTh>
                    <MudTh Style="text-align: right;">@Localization.Get("common.actions")</MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="@Localization.Get("payments.payment_id")">
                        <MudChip Size="Size.Small" Color="Color.Primary">#@context.PaymentId</MudChip>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("payments.transaction_id")">
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.ReceiptLong" Size="Size.Small" Color="Color.Secondary" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                            <MudText Typo="Typo.body2" Class="font-weight-medium">@context.TransactionId</MudText>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("payments.amount")">
                        <MudChip Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.AttachMoney">
                            @context.Amount.ToString("N2") @Localization.Get("units.egp")
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("payments.payment_method")">
                        <MudChip Size="Size.Small" Color="Color.Info" Icon="@GetPaymentMethodIcon(context.PaymentMethod)">
                            @GetLocalizedPaymentMethod(context.PaymentMethod)
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("payments.payment_date")">
                        <MudText Typo="Typo.body2">@context.PaymentDate.ToString("dd MMM yyyy")</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Secondary">@context.PaymentDate.ToString("hh:mm tt")</MudText>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("payments.payment_status")">
                        <MudChip Size="Size.Small"
                                 Color="@GetStatusColor(context.PaymentStatus)"
                                 Icon="@GetStatusIcon(context.PaymentStatus)">
                            @GetLocalizedStatus(context.PaymentStatus)
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("common.actions")" Style="text-align: right;">
                        <MudTooltip Text="@Localization.Get("common.view")">
                            <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                                           Size="Size.Small"
                                           Color="Color.Default"
                                           OnClick="@(() => ViewPaymentDetails(context.PaymentId))" />
                        </MudTooltip>
                        <MudTooltip Text="@Localization.Get("common.delete")">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Size="Size.Small"
                                           Color="Color.Error"
                                           OnClick="@(() => DeletePayment(context))" />
                        </MudTooltip>
                    </MudTd>
                </RowTemplate>

                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                </PagerContent>
            </MudTable>
        </MudCardContent>
    </MudCard>

    <!-- Stats Footer -->
    <MudPaper Class="pa-3 mt-3 slide-up" Elevation="1">
        <MudGrid>
            <MudItem xs="6" sm="3">
                <MudText Typo="Typo.body2" Color="Color.Success">
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Small" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                    @Localization.Get("payments.completed"): <strong>@GetStatusCount("Completed")</strong>
                </MudText>
            </MudItem>
            <MudItem xs="6" sm="3">
                <MudText Typo="Typo.body2" Color="Color.Warning">
                    <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                    @Localization.Get("payments.pending"): <strong>@GetStatusCount("Pending")</strong>
                </MudText>
            </MudItem>
            <MudItem xs="6" sm="3">
                <MudText Typo="Typo.body2" Color="Color.Error">
                    <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Small" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                    @Localization.Get("payments.failed"): <strong>@GetStatusCount("Failed")</strong>
                </MudText>
            </MudItem>
            <MudItem xs="6" sm="3">
                <MudText Typo="Typo.body2" Color="Color.Info">
                    <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Size="Size.Small" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                    @Localization.Get("payments.total_revenue"): <strong>@GetTotalRevenue().ToString("N2") @Localization.Get("units.egp")</strong>
                </MudText>
            </MudItem>
        </MudGrid>
    </MudPaper>
}
else
{
    <MudCard Elevation="2" Class="fade-in">
        <MudCardContent Class="pa-8">
            <div class="d-flex flex-column align-center text-center">
                <MudIcon Icon="@Icons.Material.Filled.AccountBalanceWallet"
                         Size="Size.Large"
                         Color="Color.Secondary"
                         Class="mb-4 pulse-icon"
                         Style="font-size: 5rem;" />
                <MudText Typo="Typo.h6" Class="mb-2">@Localization.Get("payments.no_payments")</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                    @Localization.Get("payments.no_payments_msg")
                </MudText>
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Secondary"
                           OnClick="LoadDataAsync"
                           StartIcon="@Icons.Material.Filled.Refresh">
                    @Localization.Get("payments.retry")
                </MudButton>
            </div>
        </MudCardContent>
    </MudCard>
}

<style>
    .page-header {
        animation: slideInDown 0.5s ease-out;
    }

    .fade-in {
        animation: fadeIn 0.5s ease-in;
    }

    .slide-in {
        animation: slideInLeft 0.5s ease-out;
    }

    .slide-up {
        animation: slideUp 0.5s ease-out;
    }

    .pulse-icon {
        animation: pulse 3s infinite;
    }

    .data-table-card {
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    }

    ::deep .mud-table-row:hover {
        background-color: rgba(22, 163, 74, 0.05) !important;
        transform: scale(1.01);
    }

    @@keyframes slideInDown {
        from {
            opacity: 0;
            transform: translateY(-30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @@keyframes slideInLeft {
        from {
            opacity: 0;
            transform: translateX(-30px);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes pulse {
        0%, 100% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.05);
        }
    }
</style>

@code {
    private bool isLoading = true;
    private bool _isRtl => Localization.IsArabic;
    private List<PaymentDto>? paymentsList;
    private string _searchString = "";
    private string? _statusFilter = null;

    protected override async Task OnInitializedAsync()
    {
        Localization.OnLanguageChanged += async () => await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var response = await ApiService.GetAsync<ApiService.ApiResponse<List<PaymentDto>>>("/api/Orders/payments/all");
            paymentsList = response?.Data;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Localization.Get("common.error")}: {ex.Message}", Severity.Error);
            paymentsList = new List<PaymentDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private IEnumerable<PaymentDto> GetFilteredPayments()
    {
        if (paymentsList == null) return Enumerable.Empty<PaymentDto>();

        var filtered = paymentsList.AsEnumerable();

        if (_statusFilter != null)
            filtered = filtered.Where(p => p.PaymentStatus == _statusFilter);

        if (!string.IsNullOrWhiteSpace(_searchString))
            filtered = filtered.Where(p =>
                p.PaymentId.ToString().Contains(_searchString) ||
                p.TransactionId.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                p.PaymentMethod.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                p.PaymentStatus.Contains(_searchString, StringComparison.OrdinalIgnoreCase));

        return filtered;
    }

    private void FilterByStatus(string? status) => _statusFilter = status;

    private int GetStatusCount(string status) => paymentsList?.Count(p => p.PaymentStatus == status) ?? 0;

    private decimal GetTotalRevenue() => paymentsList?.Where(p => p.PaymentStatus == "Completed").Sum(p => p.Amount) ?? 0;

    private string GetLocalizedStatus(string status) => status switch
    {
        "Completed" => Localization.Get("payments.completed"),
        "Pending" => Localization.Get("payments.pending"),
        "Failed" => Localization.Get("payments.failed"),
        "Canceled" => Localization.Get("payments.canceled"),
        _ => status
    };

    private string GetLocalizedPaymentMethod(string method) => method.ToLower() switch
    {
        "cash" => Localization.Get("payments.cash"),
        "creditcard" or "credit card" => Localization.Get("payments.credit_card"),
        "debitcard" or "debit card" => Localization.Get("payments.debit_card"),
        "wallet" => Localization.Get("payments.wallet"),
        _ => method
    };

    private Color GetStatusColor(string status) => status switch
    {
        "Completed" => Color.Success,
        "Pending" => Color.Warning,
        "Failed" => Color.Error,
        "Canceled" => Color.Default,
        _ => Color.Default
    };

    private string GetStatusIcon(string status) => status switch
    {
        "Completed" => Icons.Material.Filled.CheckCircle,
        "Pending" => Icons.Material.Filled.Schedule,
        "Failed" => Icons.Material.Filled.Error,
        "Canceled" => Icons.Material.Filled.Cancel,
        _ => Icons.Material.Filled.Info
    };

    private string GetPaymentMethodIcon(string method) => method.ToLower() switch
    {
        "cash" => Icons.Material.Filled.Money,
        "creditcard" or "credit card" or "card" => Icons.Material.Filled.CreditCard,
        "debitcard" or "debit card" => Icons.Material.Filled.CreditCard,
        "wallet" => Icons.Material.Filled.AccountBalanceWallet,
        _ => Icons.Material.Filled.Payment
    };

    private async Task ViewPaymentDetails(int paymentId)
    {
        // Since there's no dedicated endpoint, show basic info from the list
        var payment = paymentsList?.FirstOrDefault(p => p.PaymentId == paymentId);
        if (payment == null)
        {
            Snackbar.Add(Localization.Get("common.error"), Severity.Error);
            return;
        }

        var paymentDetails = new PaymentDetailsDialog.PaymentDetailsDto
        {
            PaymentId = payment.PaymentId,
            Amount = payment.Amount,
            PaymentDate = payment.PaymentDate,
            PaymentMethod = payment.PaymentMethod,
            PaymentStatus = payment.PaymentStatus,
            TransactionId = payment.TransactionId,
            Order = null, // Not available in list
            User = null   // Not available in list
        };

        var parameters = new DialogParameters { ["PaymentDetails"] = paymentDetails };
        await DialogService.ShowAsync<PaymentDetailsDialog>(
            Localization.Get("dialog.payment_details"),
            parameters,
            new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            });
    }

    private async Task DeletePayment(PaymentDto payment)
    {
        var paymentDto = new DeletePaymentDialog.PaymentDto
        {
            PaymentId = payment.PaymentId,
            TransactionId = payment.TransactionId,
            Amount = payment.Amount,
            PaymentMethod = payment.PaymentMethod,
            Status = payment.PaymentStatus,
            PaymentDate = payment.PaymentDate,
            OrderId = 0 // You may need to add OrderId to your PaymentDto if available
        };
        
        var parameters = new DialogParameters
        {
            ["Payment"] = paymentDto
        };

        var dialog = await DialogService.ShowAsync<DeletePaymentDialog>(
            Localization.Get("dialog.delete_payment"),
            parameters,
            new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = true
            });

        var result = await dialog.Result;
        
        if (result.Canceled || result.Data is not DeletePaymentDialog.DeletePaymentResult deleteResult || !deleteResult.Confirmed)
            return;

        // Here you would typically validate the admin password before proceeding
        // For now, we'll proceed with the deletion
        try
        {
            // Note: In a real application, you would need to implement the actual delete API endpoint
            Snackbar.Add(Localization.IsArabic
                ? $"تم حذف عملية الدفع #@{payment.PaymentId} بنجاح!"
                : $"Payment #@{payment.PaymentId} deleted successfully!", Severity.Success);
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportToCSV()
    {
        if (paymentsList == null || !paymentsList.Any()) return;

        var filtered = GetFilteredPayments().ToList();
        var csv = new System.Text.StringBuilder();
        csv.AppendLine("Payment ID,Transaction ID,Amount,Payment Method,Status,Date");

        foreach (var payment in filtered)
        {
            csv.AppendLine($"{payment.PaymentId},{payment.TransactionId},{payment.Amount},{GetLocalizedPaymentMethod(payment.PaymentMethod)},{GetLocalizedStatus(payment.PaymentStatus)},{payment.PaymentDate:yyyy-MM-dd HH:mm}");
        }

        var bytes = System.Text.Encoding.UTF8.GetBytes(csv.ToString());
        var base64 = Convert.ToBase64String(bytes);
        await JS.InvokeVoidAsync("eval", $"(function(){{var a=document.createElement('a');a.href='data:text/csv;base64,{base64}';a.download='Payments_{DateTime.Now:yyyyMMdd_HHmmss}.csv';a.click();}})()");

        Snackbar.Add(Localization.IsArabic
            ? $"تم تصدير {filtered.Count} معاملة بنجاح!"
            : $"Exported {filtered.Count} payments successfully!", Severity.Success);
    }

    public class PaymentDto
    {
        [JsonPropertyName("paymentId")] public int PaymentId { get; set; }
        [JsonPropertyName("amount")] public decimal Amount { get; set; }
        [JsonPropertyName("paymentDate")] public DateTime PaymentDate { get; set; }
        [JsonPropertyName("paymentMethod")] public string PaymentMethod { get; set; } = string.Empty;
        [JsonPropertyName("paymentStatus")] public string PaymentStatus { get; set; } = string.Empty;
        [JsonPropertyName("transactionId")] public string TransactionId { get; set; } = string.Empty;
    }
}