@page "/users"
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject IDialogService DialogService
@using AdminDashboard.Services
@using AlaMashiDashboard.Services
@inject LocalizationService Localization

<PageTitle>@Localization.Get("users.title")</PageTitle>

<!-- Page Header -->
<div class="page-header mb-4 slide-in">
    <div class="d-flex justify-space-between align-center flex-wrap">
        <div>
            <MudText Typo="Typo.h4" Class="font-weight-bold mb-1">
                <MudIcon Icon="@Icons.Material.Filled.People" Class="@(_isRtl ? "ml-2" : "mr-2")" />
                @Localization.Get("users.title")
            </MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">@Localization.Get("users.subtitle")</MudText>
        </div>
        <div class="d-flex gap-2 mt-2 mt-md-0">
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Secondary"
                       StartIcon="@Icons.Material.Filled.Refresh"
                       OnClick="LoadDataAsync">
                @Localization.Get("common.refresh")
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Success"
                       StartIcon="@Icons.Material.Filled.FileDownload"
                       OnClick="ExportToCSV"
                       Disabled="@(usersList == null || !usersList.Any())">
                @Localization.Get("common.export")
            </MudButton>
        </div>
    </div>
</div>

<!-- Filter Chips -->
<MudPaper Class="pa-3 mb-4 slide-up" Elevation="1">
    <div class="d-flex flex-wrap gap-2 align-center">
        <MudText Typo="Typo.body2" Class="@(_isRtl ? "ml-2" : "mr-2")">@Localization.Get("common.filter"):</MudText>
        <MudChip Color="@(_roleFilter == null ? Color.Primary : Color.Default)"
                 OnClick="@(() => FilterByRole(null))"
                 Size="Size.Small">
            @Localization.Get("common.all") (@(usersList?.Count ?? 0))
        </MudChip>
        <MudChip Color="@(_roleFilter == "Admin" ? Color.Error : Color.Default)"
                 OnClick="@(() => FilterByRole("Admin"))"
                 Size="Size.Small"
                 Icon="@Icons.Material.Filled.AdminPanelSettings">
            @Localization.Get("users.admin") (@GetRoleCount("Admin"))
        </MudChip>
        <MudChip Color="@(_roleFilter == "User" ? Color.Info : Color.Default)"
                 OnClick="@(() => FilterByRole("User"))"
                 Size="Size.Small"
                 Icon="@Icons.Material.Filled.Person">
            @Localization.Get("users.user") (@GetRoleCount("User"))
        </MudChip>
    </div>
</MudPaper>

@if (isLoading)
{
    <MudCard Elevation="2" Class="fade-in">
        <MudCardContent>
            <div class="d-flex flex-column justify-center align-center pa-8">
                <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" />
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-4">@Localization.Get("common.loading")</MudText>
            </div>
        </MudCardContent>
    </MudCard>
}
else if (usersList != null && usersList.Any())
{
    <MudCard Elevation="2" Class="data-table-card fade-in">
        <MudCardContent Class="pa-0">
            <MudTable Items="@GetFilteredUsers()"
                      Hover="true"
                      Breakpoint="Breakpoint.Sm"
                      FixedHeader="true"
                      Height="calc(100vh - 400px)"
                      Class="custom-table">

                <ToolBarContent>
                    <MudTextField @bind-Value="_searchString"
                                  Placeholder="@Localization.Get("common.search")"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Immediate="true"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Class="@(_isRtl ? "ml-2" : "mr-2")"
                                  Style="max-width: 400px;" />
                    <MudSpacer />
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        @Localization.Get("categories.showing") <strong>@GetFilteredUsers().Count()</strong> @Localization.Get("common.of") <strong>@usersList.Count</strong>
                    </MudText>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<UserDto, object>(x => x.UserId)">
                            @Localization.Get("users.id")
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<UserDto, object>(x => x.UserName)">
                            @Localization.Get("users.username")
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>@Localization.Get("users.email")</MudTh>
                    <MudTh>@Localization.Get("users.phone")</MudTh>
                    <MudTh>@Localization.Get("users.role")</MudTh>
                    <MudTh Style="text-align: right;">@Localization.Get("common.actions")</MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="@Localization.Get("users.id")">
                        <MudChip Size="Size.Small" Color="Color.Default">@context.UserId</MudChip>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("users.username")">
                        <div class="d-flex align-center">
                            <MudAvatar Size="Size.Small" Color="@(context.UserRole == "Admin" ? Color.Error : Color.Primary)" Class="@(_isRtl ? "ml-2" : "mr-2")">
                                @context.UserName.Substring(0, 1).ToUpper()
                            </MudAvatar>
                            <MudText Typo="Typo.body2" Class="font-weight-medium">@context.UserName</MudText>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("users.email")">
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Email" Size="Size.Small" Color="Color.Info" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                            <MudText Typo="Typo.body2" Color="Color.Secondary">@context.Email</MudText>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("users.phone")">
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Phone" Size="Size.Small" Color="Color.Success" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                            <MudText Typo="Typo.body2" Color="Color.Secondary">@context.Phone</MudText>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("users.role")">
                        @if (context.UserRole == "Admin")
                        {
                            <MudChip Size="Size.Small"
                                     Color="Color.Error"
                                     Icon="@Icons.Material.Filled.AdminPanelSettings">
                                @Localization.Get("users.admin")
                            </MudChip>
                        }
                        else
                        {
                            <MudChip Size="Size.Small"
                                     Color="Color.Default"
                                     Icon="@Icons.Material.Filled.Person">
                                @Localization.Get("users.user")
                            </MudChip>
                        }
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("common.actions")" Style="text-align: right;">
                        <MudTooltip Text="@Localization.Get("common.view")">
                            <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                                           Size="Size.Small"
                                           Color="Color.Default"
                                           OnClick="@(() => ViewUser(context))" />
                        </MudTooltip>
                        @if (context.UserRole != "Admin")
                        {
                            <MudTooltip Text="@Localization.Get("users.promote")">
                                <MudIconButton Icon="@Icons.Material.Filled.AdminPanelSettings"
                                               Size="Size.Small"
                                               Color="Color.Warning"
                                               OnClick="@(() => PromoteToAdmin(context))" />
                            </MudTooltip>
                        }
                        <MudTooltip Text="@Localization.Get("common.edit")">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           Size="Size.Small"
                                           Color="Color.Info"
                                           OnClick="@(() => OpenEditDialog(context))" />
                        </MudTooltip>
                        <MudTooltip Text="@Localization.Get("common.delete")">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Size="Size.Small"
                                           Color="Color.Error"
                                           OnClick="@(() => DeleteUser(context))" />
                        </MudTooltip>
                    </MudTd>
                </RowTemplate>

                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                </PagerContent>
            </MudTable>
        </MudCardContent>
    </MudCard>

    <!-- Stats Footer -->
    <MudPaper Class="pa-3 mt-3 slide-up" Elevation="1">
        <div class="d-flex justify-space-between align-center flex-wrap gap-2">
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                <MudIcon Icon="@Icons.Material.Filled.Group" Size="Size.Small" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                @Localization.Get("users.total"): <strong>@usersList.Count</strong>
            </MudText>
            <MudText Typo="Typo.body2" Color="Color.Error">
                <MudIcon Icon="@Icons.Material.Filled.AdminPanelSettings" Size="Size.Small" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                @Localization.Get("users.admins"): <strong>@GetRoleCount("Admin")</strong>
            </MudText>
            <MudText Typo="Typo.body2" Color="Color.Primary">
                <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                @Localization.Get("users.regular"): <strong>@GetRoleCount("User")</strong>
            </MudText>
        </div>
    </MudPaper>
}
else
{
    <MudCard Elevation="2" Class="fade-in">
        <MudCardContent Class="pa-8">
            <div class="d-flex flex-column align-center text-center">
                <MudIcon Icon="@Icons.Material.Filled.PersonOff"
                         Size="Size.Large"
                         Color="Color.Secondary"
                         Class="mb-4 pulse-icon"
                         Style="font-size: 5rem;" />
                <MudText Typo="Typo.h6" Class="mb-2">@Localization.Get("users.empty")</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                    @Localization.Get("users.empty_msg")
                </MudText>
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Secondary"
                           OnClick="LoadDataAsync"
                           StartIcon="@Icons.Material.Filled.Refresh">
                    @Localization.Get("common.retry")
                </MudButton>
            </div>
        </MudCardContent>
    </MudCard>
}

<style>
    .page-header {
        animation: slideInDown 0.5s ease-out;
    }

    .fade-in {
        animation: fadeIn 0.5s ease-in;
    }

    .slide-in {
        animation: slideInLeft 0.5s ease-out;
    }

    .slide-up {
        animation: slideUp 0.5s ease-out;
    }

    .pulse-icon {
        animation: pulse 3s infinite;
    }

    .data-table-card {
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    }

    ::deep .mud-table-row:hover {
        background-color: rgba(59, 130, 246, 0.05) !important;
        transform: scale(1.01);
    }

    @@keyframes slideInDown {
        from {
            opacity: 0;
            transform: translateY(-30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @@keyframes slideInLeft {
        from {
            opacity: 0;
            transform: translateX(-30px);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes pulse {
        0%, 100% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.05);
        }
    }
</style>

@code {
    private bool isLoading = true;
    private bool _isRtl => Localization.IsArabic;
    private List<UserDto>? usersList;
    private string _searchString = "";
    private string? _roleFilter = null;

    protected override async Task OnInitializedAsync()
    {
        Localization.OnLanguageChanged += async () => await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        usersList = null;
        isLoading = true;
        StateHasChanged();

        try
        {
            var usersL = await ApiService.GetAsync<ApiService.ApiResponse<List<UserDto>>>("/api/Users/all");
            usersList = usersL?.Data;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private IEnumerable<UserDto> GetFilteredUsers()
    {
        if (usersList == null) return Enumerable.Empty<UserDto>();

        var filtered = usersList.AsEnumerable();

        if (_roleFilter != null)
            filtered = filtered.Where(u => u.UserRole == _roleFilter);

        if (!string.IsNullOrWhiteSpace(_searchString))
            filtered = filtered.Where(u =>
                u.UserName.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                u.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                u.Phone.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                u.UserId.ToString().Contains(_searchString));

        return filtered;
    }

    private void FilterByRole(string? role) => _roleFilter = role;
    private int GetRoleCount(string role) => usersList?.Count(u => u.UserRole == role) ?? 0;

    private async Task PromoteToAdmin(UserDto user)
    {
        var confirmed = await DialogService.ShowMessageBox(
            Localization.Get("users.promote"),
            Localization.IsArabic
                ? $"هل أنت متأكد من ترقية '{user.UserName}' إلى مدير؟ سيمنحه هذا صلاحيات إدارية كاملة."
                : $"Are you sure you want to promote '{user.UserName}' to Admin? This will grant them full administrative privileges.",
            yesText: Localization.Get("users.promote"),
            cancelText: Localization.Get("common.cancel"));

        if (confirmed != true) return;

        try
        {
            await ApiService.PostAsync<object>($"/api/Users/{user.UserId}/promote-to-admin", null);
            Snackbar.Add(Localization.IsArabic
                ? $"تمت ترقية '{user.UserName}' إلى مدير بنجاح!"
                : $"User '{user.UserName}' has been promoted to Admin successfully!", Severity.Success);
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task ViewUser(UserDto user)
    {
        var details = Localization.IsArabic
            ? $@"تفاصيل المستخدم:

الرقم: {user.UserId}
الاسم: {user.UserName}
البريد: {user.Email}
الهاتف: {user.Phone}
الدور: {(user.UserRole == "Admin" ? "مدير" : "مستخدم")}"
            : $@"User Details:

ID: {user.UserId}
Name: {user.UserName}
Email: {user.Email}
Phone: {user.Phone}
Role: {user.UserRole}";
        await DialogService.ShowMessageBox(Localization.Get("common.view"), details, yesText: Localization.Get("common.close"));
    }

    private void OpenEditDialog(UserDto user)
    {
        Snackbar.Add(Localization.IsArabic
            ? $"ميزة التعديل لـ {user.UserName} - قريباً"
            : $"Edit feature for {user.UserName} - Coming soon", Severity.Info);
    }

    private async Task DeleteUser(UserDto user)
    {
        var confirmed = await DialogService.ShowMessageBox(
            Localization.Get("common.delete"),
            Localization.IsArabic
                ? $"هل أنت متأكد من حذف المستخدم '{user.UserName}'؟ لا يمكن التراجع عن هذا الإجراء."
                : $"Are you sure you want to delete user '{user.UserName}'? This action cannot be undone.",
            yesText: Localization.Get("common.delete"),
            cancelText: Localization.Get("common.cancel"));

        if (confirmed != true) return;

        try
        {
            await ApiService.DeleteAsync($"/api/Users/{user.UserId}");
            Snackbar.Add(Localization.IsArabic
                ? $"تم حذف المستخدم '{user.UserName}' بنجاح!"
                : $"User '{user.UserName}' has been deleted successfully!", Severity.Success);
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task ExportToCSV()
    {
        if (usersList == null || !usersList.Any()) return;

        var filtered = GetFilteredUsers().ToList();
        var csv = new System.Text.StringBuilder();
        csv.AppendLine("User ID,Username,Email,Phone,Role");

        foreach (var user in filtered)
        {
            csv.AppendLine($"{user.UserId},{user.UserName},{user.Email},{user.Phone},{user.UserRole}");
        }

        var bytes = System.Text.Encoding.UTF8.GetBytes(csv.ToString());
        var base64 = Convert.ToBase64String(bytes);
        await JS.InvokeVoidAsync("eval", $"(function(){{var a=document.createElement('a');a.href='data:text/csv;base64,{base64}';a.download='Users_{DateTime.Now:yyyyMMdd_HHmmss}.csv';a.click();}})()");

        Snackbar.Add(Localization.IsArabic
            ? $"تم تصدير {filtered.Count} مستخدم بنجاح!"
            : $"Exported {filtered.Count} users successfully!", Severity.Success);
    }

    public class UserDto
    {
        [JsonPropertyName("userId")] public int UserId { get; set; }
        [JsonPropertyName("userName")] public string UserName { get; set; } = string.Empty;
        [JsonPropertyName("email")] public string Email { get; set; } = string.Empty;
        [JsonPropertyName("phone")] public string Phone { get; set; } = string.Empty;
        [JsonPropertyName("userRole")] public string UserRole { get; set; } = string.Empty;
    }
}