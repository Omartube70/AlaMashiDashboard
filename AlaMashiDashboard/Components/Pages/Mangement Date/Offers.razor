@page "/Offers"
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject IDialogService DialogService
@inject LocalizationService Localization
@using AdminDashboard.Services
@using AlaMashiDashboard.Services
@using AlaMashi.AdminDashboard.Components.Dialogs

<PageTitle>@Localization.Get("offers.title")</PageTitle>

<!-- Page Header -->
<div class="page-header mb-4 slide-in">
    <div class="d-flex justify-space-between align-center flex-wrap">
        <div>
            <MudText Typo="Typo.h4" Class="font-weight-bold mb-1">
                <MudIcon Icon="@Icons.Material.Filled.LocalOffer" Class="@(_isRtl ? "ml-2" : "mr-2")" />
                @Localization.Get("offers.title")
            </MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">@Localization.Get("offers.subtitle")</MudText>
        </div>
        <div class="d-flex gap-2 mt-2 mt-md-0">
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Secondary"
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="OpenAddDialog">
                @Localization.Get("offers.add")
            </MudButton>
            <MudButton Variant="Variant.Outlined"
                       Color="Color.Secondary"
                       StartIcon="@Icons.Material.Filled.Refresh"
                       OnClick="LoadDataAsync">
                @Localization.Get("common.refresh")
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Success"
                       StartIcon="@Icons.Material.Filled.FileDownload"
                       OnClick="ExportToCSV"
                       Disabled="@(offersList == null || !offersList.Any())">
                @Localization.Get("common.export")
            </MudButton>
        </div>
    </div>
</div>

<!-- Filter Chips -->
<MudPaper Class="pa-3 mb-4 slide-up" Elevation="1">
    <div class="d-flex flex-wrap gap-2 align-center">
        <MudText Typo="Typo.body2" Class="@(_isRtl ? "ml-2" : "mr-2")">
            @Localization.Get("common.filter"):
        </MudText>
        <MudChip Color="@(_statusFilter == null ? Color.Primary : Color.Default)"
                 OnClick="@(() => FilterByStatus(null))"
                 Size="Size.Small">
            @Localization.Get("common.all") (@(offersList?.Count ?? 0))
        </MudChip>
        <MudChip Color="@(_statusFilter == "Active" ? Color.Success : Color.Default)"
                 OnClick="@(() => FilterByStatus("Active"))"
                 Size="Size.Small"
                 Icon="@Icons.Material.Filled.CheckCircle">
            @Localization.Get("common.active") (@GetStatusCount("Active"))
        </MudChip>
        <MudChip Color="@(_statusFilter == "Upcoming" ? Color.Info : Color.Default)"
                 OnClick="@(() => FilterByStatus("Upcoming"))"
                 Size="Size.Small"
                 Icon="@Icons.Material.Filled.Schedule">
            @Localization.Get("offers.upcoming") (@GetStatusCount("Upcoming"))
        </MudChip>
        <MudChip Color="@(_statusFilter == "Expired" ? Color.Default : Color.Default)"
                 OnClick="@(() => FilterByStatus("Expired"))"
                 Size="Size.Small"
                 Icon="@Icons.Material.Filled.Cancel">
            @Localization.Get("offers.expired") (@GetStatusCount("Expired"))
        </MudChip>
    </div>
</MudPaper>

@if (isLoading)
{
    <MudCard Elevation="2" Class="fade-in">
        <MudCardContent>
            <div class="d-flex flex-column justify-center align-center pa-8">
                <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" />
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-4">@Localization.Get("common.loading")</MudText>
            </div>
        </MudCardContent>
    </MudCard>
}
else if (offersList != null && offersList.Any())
{
    <MudCard Elevation="2" Class="data-table-card fade-in">
        <MudCardContent Class="pa-0">
            <MudTable Items="@GetFilteredOffers()"
                      Hover="true"
                      Breakpoint="Breakpoint.Sm"
                      FixedHeader="true"
                      Height="calc(100vh - 400px)"
                      Class="custom-table">

                <ToolBarContent>
                    <MudTextField @bind-Value="_searchString"
                                  Placeholder="@Localization.Get("common.search")"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Immediate="true"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Class="@(_isRtl ? "ml-2" : "mr-2")"
                                  Style="max-width: 400px;" />
                    <MudSpacer />
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        @Localization.Get("common.showing") <strong>@GetFilteredOffers().Count()</strong> @Localization.Get("common.of") <strong>@offersList.Count</strong>
                    </MudText>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<OfferDto, object>(x => x.OfferID)">
                            @Localization.Get("offers.id")
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<OfferDto, object>(x => x.Title)">
                            @Localization.Get("offers.title_col")
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>@Localization.Get("offers.description")</MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<OfferDto, object>(x => x.DiscountPercentage)">
                            @Localization.Get("offers.discount")
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>@Localization.Get("offers.period")</MudTh>
                    <MudTh>@Localization.Get("offers.status")</MudTh>
                    <MudTh Style="text-align: right;">@Localization.Get("common.actions")</MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="@Localization.Get("offers.id")">
                        <MudChip Size="Size.Small" Color="Color.Default">@context.OfferID</MudChip>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("offers.title_col")">
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.LocalOffer"
                                     Color="Color.Warning"
                                     Size="Size.Small"
                                     Class="@(_isRtl ? "ml-2" : "mr-2")" />
                            <MudText Typo="Typo.body2" Class="font-weight-medium">@context.Title</MudText>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("offers.description")">
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            @(context.Description.Length > 40 ? context.Description.Substring(0, 40) + "..." : context.Description)
                        </MudText>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("offers.discount")">
                        <MudChip Size="Size.Small"
                                 Color="Color.Success"
                                 Icon="@Icons.Material.Filled.Percent"
                                 Style="font-weight: bold;">
                            @context.DiscountPercentage%
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("offers.period")">
                        <div class="d-flex flex-column">
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small" />
                                @context.StartDate.ToString("MMM dd, yyyy")
                            </MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                <MudIcon Icon="@Icons.Material.Filled.Event" Size="Size.Small" />
                                @context.EndDate.ToString("MMM dd, yyyy")
                            </MudText>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("offers.status")">
                        @{
                            var status = GetOfferStatus(context);
                        }
                        @if (status == "Active")
                        {
                            <MudChip Size="Size.Small"
                                     Color="Color.Success"
                                     Icon="@Icons.Material.Filled.CheckCircle">
                                @Localization.Get("common.active")
                            </MudChip>
                        }
                        else if (status == "Upcoming")
                        {
                            <MudChip Size="Size.Small"
                                     Color="Color.Info"
                                     Icon="@Icons.Material.Filled.Schedule">
                                @Localization.Get("offers.upcoming")
                            </MudChip>
                        }
                        else
                        {
                            <MudChip Size="Size.Small"
                                     Color="Color.Default"
                                     Icon="@Icons.Material.Filled.Cancel">
                                @Localization.Get("offers.expired")
                            </MudChip>
                        }
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("common.actions")" Style="text-align: right;">
                        <MudTooltip Text="@Localization.Get("common.view")">
                            <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                                           Size="Size.Small"
                                           Color="Color.Default"
                                           OnClick="@(() => ViewOffer(context))" />
                        </MudTooltip>
                        <MudTooltip Text="@Localization.Get("common.edit")">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           Size="Size.Small"
                                           Color="Color.Info"
                                           OnClick="@(() => OpenEditDialog(context))" />
                        </MudTooltip>
                        <MudTooltip Text="@Localization.Get("common.delete")">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Size="Size.Small"
                                           Color="Color.Error"
                                           OnClick="@(() => DeleteOffer(context))" />
                        </MudTooltip>
                    </MudTd>
                </RowTemplate>

                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                </PagerContent>
            </MudTable>
        </MudCardContent>
    </MudCard>

    <!-- Stats Footer -->
    <MudPaper Class="pa-3 mt-3 slide-up" Elevation="1">
        <div class="d-flex justify-space-between align-center flex-wrap gap-2">
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                @Localization.Get("common.all"): <strong>@offersList.Count</strong>
            </MudText>
            <MudText Typo="Typo.body2" Color="Color.Success">
                @Localization.Get("common.active"): <strong>@GetStatusCount("Active")</strong>
            </MudText>
            <MudText Typo="Typo.body2" Color="Color.Info">
                @Localization.Get("offers.upcoming"): <strong>@GetStatusCount("Upcoming")</strong>
            </MudText>
            <MudText Typo="Typo.body2" Color="Color.Default">
                @Localization.Get("offers.expired"): <strong>@GetStatusCount("Expired")</strong>
            </MudText>
        </div>
    </MudPaper>
}
else
{
    <MudCard Elevation="2" Class="fade-in">
        <MudCardContent Class="pa-8">
            <div class="d-flex flex-column align-center text-center">
                <MudIcon Icon="@Icons.Material.Filled.LocalOffer"
                         Size="Size.Large"
                         Color="Color.Secondary"
                         Class="mb-4 pulse-icon"
                         Style="font-size: 5rem;" />
                <MudText Typo="Typo.h6" Class="mb-2">@Localization.Get("offers.empty")</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                    @Localization.Get("offers.empty_msg")
                </MudText>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="OpenAddDialog"
                           StartIcon="@Icons.Material.Filled.Add">
                    @Localization.Get("offers.create_first")
                </MudButton>
            </div>
        </MudCardContent>
    </MudCard>
}

<style>
    .page-header {
        animation: slideInDown 0.5s ease-out;
    }

    .fade-in {
        animation: fadeIn 0.5s ease-in;
    }

    .slide-in {
        animation: slideInLeft 0.5s ease-out;
    }

    .slide-up {
        animation: slideUp 0.5s ease-out;
    }

    .pulse-icon {
        animation: pulse 3s infinite;
    }

    .data-table-card {
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    }

    ::deep .mud-table-row:hover {
        background-color: rgba(22, 163, 74, 0.05) !important;
        transform: scale(1.01);
    }
    @@keyframes slideInDown {
        from

    {
        opacity: 0;
        transform: translateY(-30px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }
    @@keyframes fadeIn {
        from

    {
        opacity: 0;
    }

    to {
        opacity: 1;
    }

    }
    @@keyframes slideInLeft {
        from

    {
        opacity: 0;
        transform: translateX(-30px);
    }

    to {
        opacity: 1;
        transform: translateX(0);
    }

    }

    @@keyframes slideUp {
        from

    {
        opacity: 0;
        transform: translateY(30px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    @@keyframes pulse {
        0%, 100%

    {
        transform: scale(1);
    }

    50% {
        transform: scale(1.05);
    }

    }
</style>

@code {
    private bool isLoading = true;
    private bool _isRtl => Localization.IsArabic;
    private List<OfferDto>? offersList;
    private string _searchString = "";
    private string? _statusFilter = null;

    protected override async Task OnInitializedAsync()
    {
        Localization.OnLanguageChanged += async () => await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        offersList = null;
        isLoading = true;
        StateHasChanged();

        try
        {
            var offers = await ApiService.GetAsync<ApiService.ApiResponse<List<OfferDto>>>("/api/Offers/All");
            offersList = offers?.Data;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Localization.Get("common.error")}: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OpenAddDialog()
    {
        var dialog = await DialogService.ShowAsync<AddOfferDialog>(
            Localization.Get("offers.add"),
            new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = false
            });

        var result = await dialog.Result;
        if (!result.Canceled) await LoadDataAsync();
    }

    private async Task OpenEditDialog(OfferDto offer)
    {
        var parameters = new DialogParameters
        {
            ["OfferID"] = offer.OfferID,
            ["Title"] = offer.Title,
            ["Description"] = offer.Description,
            ["DiscountPercentage"] = offer.DiscountPercentage,
            ["StartDate"] = offer.StartDate,
            ["EndDate"] = offer.EndDate
        };

        var dialog = await DialogService.ShowAsync<EditOfferDialog>(
            Localization.Get("dialog.edit_offer"),
            parameters,
            new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = false
            });

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadDataAsync();
        }
    }

    private IEnumerable<OfferDto> GetFilteredOffers()
    {
        if (offersList == null) return Enumerable.Empty<OfferDto>();

        var filtered = offersList.AsEnumerable();

        if (_statusFilter != null)
            filtered = filtered.Where(o => GetOfferStatus(o) == _statusFilter);

        if (!string.IsNullOrWhiteSpace(_searchString))
            filtered = filtered.Where(o =>
                o.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                o.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
                o.OfferID.ToString().Contains(_searchString));

        return filtered;
    }

    private void FilterByStatus(string? status) => _statusFilter = status;

    private string GetOfferStatus(OfferDto offer)
    {
        var now = DateTime.Now;
        if (now >= offer.StartDate && now <= offer.EndDate)
            return "Active";
        else if (now < offer.StartDate)
            return "Upcoming";
        else
            return "Expired";
    }

    private int GetStatusCount(string status)
    {
        if (offersList == null) return 0;
        return offersList.Count(o => GetOfferStatus(o) == status);
    }

    private async Task ViewOffer(OfferDto offer)
    {
        try
        {
            var response = await ApiService.GetAsync<ApiService.ApiResponse<OfferDetailsDialog.OfferDetailsDto>>($"/api/Offers/{offer.OfferID}");

            if (response?.Data != null)
            {
                var parameters = new DialogParameters { ["OfferDetails"] = response.Data };
                await DialogService.ShowAsync<OfferDetailsDialog>(
                    Localization.Get("dialog.offer_details"),
                    parameters,
                    new DialogOptions
                    {
                        MaxWidth = MaxWidth.Medium,
                        FullWidth = true
                    });
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Localization.Get("common.error")}: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteOffer(OfferDto offer)
    {
        var offerDto = new DeleteOfferDialog.OfferDto
        {
            OfferId = offer.OfferID,
            Title = offer.Title,
            Description = offer.Description,
            DiscountPercentage = offer.DiscountPercentage,
            StartDate = offer.StartDate,
            EndDate = offer.EndDate,
            Status = GetOfferStatus(offer)
        };
        
        var parameters = new DialogParameters
        {
            ["Offer"] = offerDto
        };

        var dialog = await DialogService.ShowAsync<DeleteOfferDialog>(
            Localization.Get("dialog.delete_offer"),
            parameters,
            new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = true
            });

        var result = await dialog.Result;
        
        if (result.Canceled)
            return;

        // The dialog already handled the deletion, just reload the data
        await LoadDataAsync();
    }

    private async Task ExportToCSV()
    {
        if (offersList == null || !offersList.Any()) return;

        var filtered = GetFilteredOffers().ToList();
        var csv = new System.Text.StringBuilder();
        csv.AppendLine("Offer ID,Title,Description,Discount %,Start Date,End Date,Status");

        foreach (var offer in filtered)
        {
            var status = GetOfferStatus(offer);
            csv.AppendLine($"{offer.OfferID},{offer.Title},{offer.Description},{offer.DiscountPercentage},{offer.StartDate:yyyy-MM-dd},{offer.EndDate:yyyy-MM-dd},{status}");
        }

        var bytes = System.Text.Encoding.UTF8.GetBytes(csv.ToString());
        var base64 = Convert.ToBase64String(bytes);
        await JS.InvokeVoidAsync("eval", $"(function(){{var a=document.createElement('a');a.href='data:text/csv;base64,{base64}';a.download='Offers_{DateTime.Now:yyyyMMdd_HHmmss}.csv';a.click();}})()");

        Snackbar.Add(Localization.IsArabic
            ? $"تم تصدير {filtered.Count} عرض بنجاح!"
            : $"Exported {filtered.Count} offers successfully!", Severity.Success);
    }

    public class OfferDto
    {
        [JsonPropertyName("offerID")] public int OfferID { get; set; }
        [JsonPropertyName("title")] public string Title { get; set; } = string.Empty;
        [JsonPropertyName("description")] public string Description { get; set; } = string.Empty;
        [JsonPropertyName("discountPercentage")] public decimal DiscountPercentage { get; set; }
        [JsonPropertyName("startDate")] public DateTime StartDate { get; set; }
        [JsonPropertyName("endDate")] public DateTime EndDate { get; set; }
    }
}