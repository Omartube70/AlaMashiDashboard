@page "/Categories"
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using AdminDashboard.Services
@using AlaMashiDashboard.Services
@inject LocalizationService Localization
@using AlaMashi.AdminDashboard.Components.Dialogs

<PageTitle>@Localization.Get("categories.title")</PageTitle>

<!-- Page Header -->
<div class="page-header mb-4 slide-in">
    <div class="d-flex justify-space-between align-center flex-wrap">
        <div>
            <MudText Typo="Typo.h4" Class="font-weight-bold mb-1">
                📂 @Localization.Get("categories.title")
            </MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">@Localization.Get("categories.subtitle")</MudText>
        </div>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="OpenAddDialog"
                   Class="mt-2 mt-md-0 pulse-button">
            @Localization.Get("categories.add")
        </MudButton>
    </div>
</div>

@if (isLoading)
{
    <MudCard Elevation="2" Class="fade-in">
        <MudCardContent>
            <div class="d-flex flex-column justify-center align-center pa-8">
                <MudProgressCircular Indeterminate="true" Size="Size.Large" Color="Color.Primary" />
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-4">@Localization.Get("common.loading")</MudText>
            </div>
        </MudCardContent>
    </MudCard>
}
else if (categoriesList != null && categoriesList.Any())
{
    <MudCard Elevation="2" Class="data-table-card fade-in">
        <MudCardContent Class="pa-0">
            <MudTable Items="@GetFilteredCategories()"
                      Hover="true"
                      Breakpoint="Breakpoint.Sm"
                      FixedHeader="true"
                      Height="calc(100vh - 320px)"
                      Class="custom-table">

                <ToolBarContent>
                    <MudTextField @bind-Value="_searchString"
                                  Placeholder="@Localization.Get("common.search")"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Immediate="true"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Class="@(_isRtl ? "ml-2" : "mr-2")"
                                  Style="max-width: 400px;" />
                    <MudSpacer />
                    <MudTooltip Text="@Localization.Get("common.refresh")">
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                                       OnClick="LoadDataAsync"
                                       Color="Color.Primary" />
                    </MudTooltip>
                    <MudTooltip Text="@Localization.Get("common.export")">
                        <MudIconButton Icon="@Icons.Material.Filled.FileDownload"
                                       Color="Color.Secondary" />
                    </MudTooltip>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<CategoryDto, object>(x => x.CategoryId)">
                            @Localization.Get("categories.id")
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<CategoryDto, object>(x => x.CategoryName)">
                            @Localization.Get("categories.name")
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>@Localization.Get("categories.icon")</MudTh>
                    <MudTh>@Localization.Get("categories.parent")</MudTh>
                    <MudTh Style="text-align: right;">@Localization.Get("common.actions")</MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="@Localization.Get("categories.id")">
                        <MudChip Size="Size.Small" Color="Color.Default">@context.CategoryId</MudChip>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("categories.name")">
                        <div class="d-flex align-center">
                            <MudAvatar Size="Size.Small" Color="Color.Primary" Variant="Variant.Outlined" Class="@(_isRtl ? "ml-2" : "mr-2")">
                                <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Small" />
                            </MudAvatar>
                            <MudText Typo="Typo.body2" Class="font-weight-medium">@context.CategoryName</MudText>
                        </div>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("categories.icon")">
                        <MudChip Size="Size.Small" Color="Color.Info" Icon="@Icons.Material.Filled.Image">
                            @context.IconName
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("categories.parent")">
                        @if (context.ParentId.HasValue)
                        {
                            <MudChip Size="Size.Small" Color="Color.Secondary">ID: @context.ParentId</MudChip>
                        }
                        else
                        {
                            <MudChip Size="Size.Small" Color="Color.Default">@Localization.Get("categories.root")</MudChip>
                        }
                    </MudTd>
                    <MudTd DataLabel="@Localization.Get("common.actions")" Style="text-align: right;">
                        <MudTooltip Text="@Localization.Get("common.view")">
                            <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                                           Size="Size.Small"
                                           Color="Color.Default"
                                           OnClick="@(() => ViewCategory(context))" />
                        </MudTooltip>
                        <MudTooltip Text="@Localization.Get("common.edit")">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           Size="Size.Small"
                                           Color="Color.Info"
                                           OnClick="@(() => OpenEditDialog(context))" />
                        </MudTooltip>
                        <MudTooltip Text="@Localization.Get("common.delete")">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Size="Size.Small"
                                           Color="Color.Error"
                                           OnClick="@(() => DeleteCategory(context))" />
                        </MudTooltip>
                    </MudTd>
                </RowTemplate>

                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                </PagerContent>
            </MudTable>
        </MudCardContent>
    </MudCard>

    <!-- Stats Footer -->
    <MudPaper Class="pa-3 mt-3 slide-up" Elevation="1">
        <div class="d-flex justify-space-between align-center flex-wrap gap-2">
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                <MudIcon Icon="@Icons.Material.Filled.Folder" Size="Size.Small" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                @Localization.Get("categories.total"): <strong>@categoriesList.Count</strong>
            </MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                <MudIcon Icon="@Icons.Material.Filled.Search" Size="Size.Small" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                @Localization.Get("categories.showing"): <strong>@GetFilteredCategories().Count()</strong>
            </MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                <MudIcon Icon="@Icons.Material.Filled.FolderSpecial" Size="Size.Small" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                @Localization.Get("categories.root_count"): <strong>@categoriesList.Count(c => !c.ParentId.HasValue)</strong>
            </MudText>
        </div>
    </MudPaper>
}
else
{
    <MudCard Elevation="2" Class="fade-in">
        <MudCardContent Class="pa-8">
            <div class="d-flex flex-column align-center text-center">
                <MudIcon Icon="@Icons.Material.Filled.FolderOff"
                         Size="Size.Large"
                         Color="Color.Secondary"
                         Class="mb-4 pulse-icon"
                         Style="font-size: 5rem;" />
                <MudText Typo="Typo.h6" Class="mb-2">@Localization.Get("categories.empty")</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                    @Localization.Get("categories.empty_msg")
                </MudText>
                <div class="d-flex gap-2">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="OpenAddDialog"
                               StartIcon="@Icons.Material.Filled.Add">
                        @Localization.Get("categories.add")
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Secondary"
                               OnClick="LoadDataAsync"
                               StartIcon="@Icons.Material.Filled.Refresh">
                        @Localization.Get("common.retry")
                    </MudButton>
                </div>
            </div>
        </MudCardContent>
    </MudCard>
}

<style>
    .page-header {
        animation: slideInDown 0.5s ease-out;
    }

    .fade-in {
        animation: fadeIn 0.5s ease-in;
    }

    .slide-in {
        animation: slideInLeft 0.5s ease-out;
    }

    .slide-up {
        animation: slideUp 0.5s ease-out;
    }

    .pulse-button {
        animation: pulse 2s infinite;
    }

    .pulse-icon {
        animation: pulse 3s infinite;
    }

    .data-table-card {
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    }

    ::deep .mud-table-toolbar {
        padding: 1.25rem;
        background: linear-gradient(135deg, var(--mud-palette-surface) 0%, var(--mud-palette-background) 100%);
        border-bottom: 2px solid var(--mud-palette-divider);
    }

    ::deep .mud-table-row {
        transition: all 0.3s ease;
    }

        ::deep .mud-table-row:hover {
            background-color: rgba(22, 163, 74, 0.05) !important;
            transform: scale(1.01);
        }

    @@keyframes slideInDown {
        from {
            opacity: 0;
            transform: translateY(-30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @@keyframes slideInLeft {
        from {
            opacity: 0;
            transform: translateX(-30px);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes pulse {
        0%, 100% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.05);
        }
    }
</style>

@code {
    private bool isLoading = true;
    private bool _isRtl => Localization.IsArabic;
    private List<CategoryDto>? categoriesList;
    private string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        Localization.OnLanguageChanged += async () => await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        categoriesList = null;
        isLoading = true;
        StateHasChanged();

        try
        {
            var categories = await ApiService.GetAsync<ApiService.ApiResponse<List<CategoryDto>>>("/api/Categories/flat");
            categoriesList = categories?.Data;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private IEnumerable<CategoryDto> GetFilteredCategories()
    {
        if (categoriesList == null) return Enumerable.Empty<CategoryDto>();

        if (string.IsNullOrWhiteSpace(_searchString))
            return categoriesList;

        return categoriesList.Where(c =>
            c.CategoryName.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
            c.IconName.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
            c.CategoryId.ToString().Contains(_searchString)
        );
    }

    private async Task OpenAddDialog()
    {
        var dialog = await DialogService.ShowAsync<AddCategoryDialog>(
            Localization.Get("categories.add"),
            new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = false
            });

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadDataAsync();
        }
    }

    private void OpenEditDialog(CategoryDto category)
    {
        Snackbar.Add(Localization.IsArabic
            ? $"ميزة التعديل لـ {category.CategoryName} - قريباً"
            : $"Edit feature for {category.CategoryName} - Coming soon", Severity.Info);
    }

    private void ViewCategory(CategoryDto category)
    {
        Snackbar.Add(Localization.IsArabic
            ? $"عرض: {category.CategoryName}"
            : $"Viewing: {category.CategoryName}", Severity.Info);
    }

    private async Task DeleteCategory(CategoryDto category)
    {
        var confirmed = await DialogService.ShowMessageBox(
            Localization.Get("common.delete"),
            Localization.IsArabic
                ? $"هل أنت متأكد من حذف '{category.CategoryName}'؟ لا يمكن التراجع عن هذا الإجراء."
                : $"Are you sure you want to delete '{category.CategoryName}'? This action cannot be undone.",
            yesText: Localization.Get("common.delete"),
            cancelText: Localization.Get("common.cancel"));

        if (confirmed != true) return;

        try
        {
            var deleted = await ApiService.DeleteAsync($"/api/Categories/{category.CategoryId}");
            if (deleted)
            {
                Snackbar.Add(Localization.IsArabic
                    ? $"تم حذف التصنيف '{category.CategoryName}' بنجاح!"
                    : $"Category '{category.CategoryName}' deleted successfully!", Severity.Success);
                await LoadDataAsync();
            }
            else
            {
                Snackbar.Add(Localization.Get("common.failed"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    public class CategoryDto
    {
        [JsonPropertyName("categoryId")] public int CategoryId { get; set; }
        [JsonPropertyName("categoryName")] public string CategoryName { get; set; } = string.Empty;
        [JsonPropertyName("iconName")] public string IconName { get; set; } = string.Empty;
        [JsonPropertyName("parentId")] public int? ParentId { get; set; }
    }
}