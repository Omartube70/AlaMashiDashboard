@using AdminDashboard.Services
@inherits LayoutComponentBase
@inject LocalizationService Localization
@inject IJSRuntime JS
@implements IDisposable

<MudThemeProvider Theme="_theme" IsDarkMode="_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<!-- AppBar للتحكم في اللغة والثيم -->
<MudAppBar Elevation="0" Dense="true" Style="background: transparent; backdrop-filter: blur(10px);">
    <MudSpacer />

    <!-- Language Switcher -->
    <MudTooltip Text="@Localization.Get("lang.toggle")">
        <MudIconButton Icon="@Icons.Material.Filled.Translate"
                       OnClick="ToggleLanguage"
                       Color="Color.Inherit"
                       Size="Size.Large"
                       Class="control-btn" />
    </MudTooltip>

    <!-- Dark/Light Mode Switch -->
    <MudTooltip Text="@Localization.Get("theme.toggle")">
        <MudIconButton Icon="@(_isDarkMode? Icons.Material.Filled.DarkMode : Icons.Material.Filled.WbSunny)"
                       OnClick="ToggleTheme"
                       Color="Color.Inherit"
                       Size="Size.Large"
                       Class="control-btn" />
    </MudTooltip>
</MudAppBar>

<!-- محتوى الصفحة -->
<div class="auth-wrapper" data-theme="@(_isDarkMode ? "dark" : "light")" dir="@Localization.Direction">
    <MudContainer MaxWidth="MaxWidth.Small" Class="auth-container">
        @Body
    </MudContainer>
</div>

<style>
    .auth-wrapper {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 2rem 1rem;
        padding-top: 5rem;
        transition: background 0.3s ease;
    }

        /* Light Mode - Default (Login) */
        .auth-wrapper[data-theme="light"] {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }

        /* Dark Mode - Default (Login) */
        .auth-wrapper[data-theme="dark"] {
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
        }

    .auth-container {
        width: 100%;
        max-width: 500px;
    }

    .control-btn {
        background: rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.3);
        transition: all 0.3s ease;
        margin: 0 0.25rem;
    }

        .control-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: scale(1.1);
        }

    /* AppBar Styling */
    ::deep .mud-appbar {
        position: fixed !important;
        top: 0;
        left: 0;
        right: 0;
        z-index: 1000;
        background: rgba(255, 255, 255, 0.1) !important;
        backdrop-filter: blur(10px);
        border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    }

    @@media (max-width: 600px) {
        .auth-wrapper

    {
        padding: 1rem;
        padding-top: 4rem;
    }

    .control-btn {
        margin: 0 0.15rem;
    }

    }
</style>

@code {
    private bool _isDarkMode = false;
    private MudTheme _theme = new MudTheme()
    {
        Palette = new Palette()
        {
            Primary = "#667eea",
            Secondary = "#764ba2",
        },
        PaletteDark = new PaletteDark()
        {
            Primary = "#667eea",
            Secondary = "#764ba2",
        }
    };

    protected override async Task OnInitializedAsync()
    {
        // Initialize Localization first
        await Localization.InitializeAsync();

        // Subscribe to language changes
        Localization.OnLanguageChanged += HandleLanguageChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Load saved theme
                var savedTheme = await JS.InvokeAsync<string>("localStorage.getItem", "app_theme");
                if (!string.IsNullOrEmpty(savedTheme))
                {
                    _isDarkMode = savedTheme == "dark";
                }

                // Apply current language direction
                await ApplyLanguageDirection();

                StateHasChanged();
            }
            catch { }
        }
    }

    private async Task HandleLanguageChanged()
    {
        await ApplyLanguageDirection();
        await InvokeAsync(StateHasChanged);
    }

    private async Task ApplyLanguageDirection()
    {
        try
        {
            await JS.InvokeVoidAsync("eval", $"document.documentElement.setAttribute('dir', '{Localization.Direction}')");
            await JS.InvokeVoidAsync("eval", $"document.documentElement.setAttribute('lang', '{Localization.CurrentLanguage}')");
        }
        catch { }
    }

    private async Task ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
        try
        {
            await JS.InvokeVoidAsync("localStorage.setItem", "app_theme", _isDarkMode ? "dark" : "light");
        }
        catch { }
    }

    private async Task ToggleLanguage()
    {
        await Localization.ToggleLanguageAsync();
        // Force re-render after language change
        StateHasChanged();
    }

    public void Dispose()
    {
        Localization.OnLanguageChanged -= HandleLanguageChanged;
    }
}