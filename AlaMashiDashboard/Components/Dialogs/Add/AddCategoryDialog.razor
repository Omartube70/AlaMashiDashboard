@using global::AdminDashboard.Services
@namespace AlaMashi.AdminDashboard.Components.Dialogs
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject LocalizationService Localization

<MudDialog>
    <TitleContent>
        <div class="d-flex align-center gap-2">
            <MudIcon Icon="@Icons.Material.Filled.Category" Color="Color.Primary" />
            <MudText Typo="Typo.h6">@Localization.Get("dialog.add_category")</MudText>
        </div>
    </TitleContent>

    <DialogContent>
        <MudStack Spacing="4" Class="pa-2">
            <MudTextField @bind-Value="categoryForm.CategoryName"
                          Label="@Localization.Get("dialog.category_name")"
                          Variant="Variant.Outlined"
                          Placeholder="@Localization.Get("dialog.category_name_placeholder")"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Label"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateName))"
                          Immediate="true"
                          HelperTextOnFocus="true" />

            <MudTextField @bind-Value="categoryForm.IconName"
                          Label="@Localization.Get("dialog.icon_name")"
                          Variant="Variant.Outlined"
                          HelperText="@Localization.Get("dialog.icon_helper")"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Image"
                          Placeholder="Devices" />

            @if (validationErrors.Any())
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Dense="true">
                    @foreach (var error in validationErrors)
                    {
                        <MudText Typo="Typo.body2">• @error</MudText>
                    }
                </MudAlert>
            }
        </MudStack>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel" 
                   Variant="Variant.Text" 
                   Color="Color.Default"
                   StartIcon="@Icons.Material.Filled.Close">
            @Localization.Get("common.cancel")
        </MudButton>
        <MudButton OnClick="Submit" 
                   Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   Disabled="@isSubmitting"
                   StartIcon="@(isSubmitting ? "" : Icons.Material.Filled.Add)">
            @if (isSubmitting)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                <span class="ml-2">@Localization.Get("dialog.creating")</span>
            }
            else
            {
                @Localization.Get("dialog.create")
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    private CreateCategoryForm categoryForm = new();
    private List<string> validationErrors = new();
    private bool isSubmitting = false;

    public class CreateCategoryForm
    {
        public string CategoryName { get; set; } = string.Empty;
        public string IconName { get; set; } = string.Empty;
    }

    private IEnumerable<string> ValidateName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            yield return Localization.Get("validation.required");
        else if (name.Length < 2)
            yield return Localization.Get("validation.category_name_min");
        else if (name.Length > 50)
            yield return Localization.Get("validation.category_name_max");
    }

    private void ValidateForm()
    {
        validationErrors.Clear();
        validationErrors.AddRange(ValidateName(categoryForm.CategoryName));
    }

    private async Task Submit()
    {
        ValidateForm();
        if (validationErrors.Any()) return;

        isSubmitting = true;
        try
        {
            var createRequest = new CreateCategoryRequest
            {
                CategoryName = categoryForm.CategoryName,
                IconName = categoryForm.IconName
            };

            var response = await ApiService.PostAsync<ApiService.ApiResponse<object>>("/api/Categories/Create", createRequest);

            if (response?.Success == true)
            {
                Snackbar.Add(Localization.Get("common.category_created"), Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add(response?.Message ?? Localization.Get("common.failed"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Localization.Get("common.error")}: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();

    public class CreateCategoryRequest
    {
        [JsonPropertyName("categoryName")] public string CategoryName { get; set; } = string.Empty;
        [JsonPropertyName("iconName")] public string IconName { get; set; } = string.Empty;
    }
}