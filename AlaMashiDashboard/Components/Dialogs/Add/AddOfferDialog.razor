@namespace AlaMashi.AdminDashboard.Components.Dialogs
@using global::AdminDashboard.Services
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject LocalizationService Localization

<MudDialog ClassActions="dialog-actions-improved" ClassContent="dialog-content-smooth">
    <TitleContent>
        <div class="d-flex align-center gap-2 pa-2">
            <MudIcon Icon="@Icons.Material.Filled.LocalOffer" Color="Color.Primary" Size="Size.Large" />
            <MudText Typo="Typo.h5" Class="font-weight-bold">@Localization.Get("dialog.add_offer")</MudText>
        </div>
        <MudDivider />
    </TitleContent>

    <DialogContent>
        <MudStack Spacing="3" Class="pa-2">
            <MudTextField @bind-Value="offerForm.Title"
                          Label="@offerTitleLabel"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.LocalOffer"
                          Placeholder="@offerTitlePlaceholder"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateTitle))" />

            <MudTextField @bind-Value="offerForm.Description"
                          Label="@descriptionLabel"
                          Variant="Variant.Outlined"
                          Lines="3"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Description"
                          Placeholder="@descriptionPlaceholder"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateDescription))" />

            <MudNumericField @bind-Value="offerForm.DiscountPercentage"
                             Label="@discountLabel"
                             Variant="Variant.Outlined"
                             Min="1"
                             Max="100"
                             Adornment="Adornment.Start"
                             AdornmentIcon="@Icons.Material.Filled.Percent"
                             Validation="@(new Func<decimal, IEnumerable<string>>(ValidateDiscount))" />

            <MudDatePicker @bind-Date="offerForm.StartDate"
                           Label="@startDateLabel"
                           Variant="Variant.Outlined"
                           PickerVariant="PickerVariant.Dialog"
                           ShowToolbar="true"
                           Adornment="Adornment.Start"
                           AdornmentIcon="@Icons.Material.Filled.CalendarToday"
                           DateFormat="dd/MM/yyyy" />

            <MudDatePicker @bind-Date="offerForm.EndDate"
                           Label="@endDateLabel"
                           Variant="Variant.Outlined"
                           PickerVariant="PickerVariant.Dialog"
                           ShowToolbar="true"
                           Adornment="Adornment.Start"
                           AdornmentIcon="@Icons.Material.Filled.Event"
                           DateFormat="dd/MM/yyyy" />

            @if (validationErrors.Any())
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">
                    @foreach (var error in validationErrors)
                    {
                        <div>• @error</div>
                    }
                </MudAlert>
            }
        </MudStack>
    </DialogContent>

    <DialogActions>
        <MudStack Row="true" Spacing="2" Class="pa-2" Style="width:100%;" Justify="Justify.FlexEnd">
            <MudButton OnClick="Cancel" 
                       Variant="Variant.Outlined" 
                       Color="Color.Default"
                       StartIcon="@Icons.Material.Filled.Close"
                       Size="Size.Medium">
                @Localization.Get("common.cancel")
            </MudButton>
            <MudButton OnClick="Submit" 
                       Variant="Variant.Filled" 
                       Color="Color.Success" 
                       Disabled="@isSubmitting" 
                       StartIcon="@Icons.Material.Filled.Add"
                       Size="Size.Medium"
                       Class="px-6">
                @if (isSubmitting)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                    <span>@Localization.Get("dialog.creating")</span>
                }
                else
                {
                    @Localization.Get("dialog.create")
                }
            </MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    private CreateOfferForm offerForm = new();
    private List<string> validationErrors = new();
    private bool isSubmitting = false;

    private string offerTitleLabel => Localization.Get("dialog.offer_title");
    private string offerTitlePlaceholder => Localization.Get("dialog.offer_title_placeholder");
    private string descriptionLabel => Localization.Get("dialog.description");
    private string descriptionPlaceholder => Localization.Get("dialog.description_placeholder");
    private string discountLabel => Localization.Get("dialog.discount_percentage");
    private string startDateLabel => Localization.Get("dialog.start_date");
    private string endDateLabel => Localization.Get("dialog.end_date");

    public class CreateOfferForm
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public decimal DiscountPercentage { get; set; } = 10;
        public DateTime? StartDate { get; set; } = DateTime.Now;
        public DateTime? EndDate { get; set; } = DateTime.Now.AddDays(7);
    }

    private IEnumerable<string> ValidateTitle(string title)
    {
        if (string.IsNullOrWhiteSpace(title))
            yield return Localization.Get("validation.required");
        else if (title.Length < 3)
            yield return Localization.Get("validation.title_min");
        else if (title.Length > 100)
            yield return Localization.Get("validation.title_max");
    }

    private IEnumerable<string> ValidateDescription(string description)
    {
        if (string.IsNullOrWhiteSpace(description))
            yield return Localization.Get("validation.required");
        else if (description.Length < 10)
            yield return Localization.Get("validation.description_min");
        else if (description.Length > 500)
            yield return Localization.Get("validation.description_max");
    }

    private IEnumerable<string> ValidateDiscount(decimal discount)
    {
        if (discount < 1)
            yield return Localization.Get("validation.discount_min");
        else if (discount > 100)
            yield return Localization.Get("validation.discount_max");
    }

    private void ValidateForm()
    {
        validationErrors.Clear();

        validationErrors.AddRange(ValidateTitle(offerForm.Title));
        validationErrors.AddRange(ValidateDescription(offerForm.Description));
        validationErrors.AddRange(ValidateDiscount(offerForm.DiscountPercentage));

        if (!offerForm.StartDate.HasValue)
            validationErrors.Add(Localization.Get("validation.start_date_required"));

        if (!offerForm.EndDate.HasValue)
            validationErrors.Add(Localization.Get("validation.end_date_required"));

        if (offerForm.StartDate.HasValue && offerForm.EndDate.HasValue && offerForm.StartDate > offerForm.EndDate)
            validationErrors.Add(Localization.Get("validation.end_after_start"));
    }

    private async Task Submit()
    {
        ValidateForm();

        if (validationErrors.Any())
            return;

        isSubmitting = true;

        try
        {
            var createRequest = new CreateOfferRequest
            {
                Title = offerForm.Title,
                Description = offerForm.Description,
                DiscountPercentage = offerForm.DiscountPercentage,
                StartDate = offerForm.StartDate ?? DateTime.Now,
                EndDate = offerForm.EndDate ?? DateTime.Now.AddDays(7)
            };

            var response = await ApiService.PostAsync<ApiService.ApiResponse<object>>(
                "/api/Offers/Create", createRequest);

            if (response?.Status == "success")
            {
                Snackbar.Add(Localization.Get("common.offer_created"), Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add(response?.Message ?? Localization.Get("common.failed"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Localization.Get("common.create_error")}: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    public class CreateOfferRequest
    {
        [JsonPropertyName("title")] public string Title { get; set; } = string.Empty;
        [JsonPropertyName("description")] public string Description { get; set; } = string.Empty;
        [JsonPropertyName("discountPercentage")] public decimal DiscountPercentage { get; set; }
        [JsonPropertyName("startDate")] public DateTime StartDate { get; set; }
        [JsonPropertyName("endDate")] public DateTime EndDate { get; set; }
    }
}