@namespace AlaMashi.AdminDashboard.Components.Dialogs
@inject ApiService ApiService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudStack Spacing="3" Class="dialog-content" Style="max-height: 600px; overflow-y: auto;">
            <MudTextField @bind-Value="productForm.ProductName"
                          Label="Product Name"
                          Variant="Variant.Outlined"
                          Placeholder="e.g., Wireless Headphones"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateName))" />

            <MudTextField @bind-Value="productForm.ProductDescription"
                          Label="Description"
                          Variant="Variant.Outlined"
                          Lines="3"
                          Placeholder="Describe your product..."
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateDescription))" />

            <MudTextField @bind-Value="productForm.Price"
                          Label="Price (EGP)"
                          Variant="Variant.Outlined"
                          InputType="InputType.Number"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidatePriceText))" />

            <MudTextField @bind-Value="productForm.QuantityText"
                          Label="Quantity in Stock"
                          Variant="Variant.Outlined"
                          InputType="InputType.Number"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateQuantityText))" />

            <MudSelect @bind-Value="productForm.CategoryId"
                       Label="Category"
                       Variant="Variant.Outlined"
                       AnchorOrigin="Origin.BottomCenter"
                       Validation="@(new Func<int, IEnumerable<string>>(ValidateCategory))">
                <MudSelectItem Value="@(0)">-- Select Category --</MudSelectItem>
                @if (categories != null && categories.Any())
                {
                    @foreach (var category in categories)
                    {
                        <MudSelectItem Value="@(category.CategoryId)">@category.CategoryName</MudSelectItem>
                    }
                }
            </MudSelect>

            <MudTextField @bind-Value="productForm.MainImageURL"
                          Label="Image URL (Optional)"
                          Variant="Variant.Outlined"
                          Placeholder="https://example.com/image.jpg"
                          HelperText="Provide a URL to the product image" />

            @if (validationErrors.Any())
            {
                <MudAlert Severity="Severity.Error">
                    @foreach (var error in validationErrors)
                    {
                        <div>@error</div>
                    }
                </MudAlert>
            }
        </MudStack>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Outlined">Cancel</MudButton>
        <MudButton OnClick="Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@isSubmitting">
            @(isSubmitting ? "Creating..." : "Create Product")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    private CreateProductForm productForm = new();
    private List<CategoryOption> categories = new();
    private List<string> validationErrors = new();
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        try
        {
            var response = await ApiService.GetAsync<ApiService.ApiResponse<List<CategoryOption>>>(
                "/api/Categories/flat");

            categories = response?.Data ?? new();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading categories: {ex.Message}", Severity.Error);
        }
    }

    public class CreateProductForm
    {
        public string ProductName { get; set; } = string.Empty;
        public string ProductDescription { get; set; } = string.Empty;
        public string Price { get; set; } = "0";
        public string QuantityText { get; set; } = "0";
        public int CategoryId { get; set; } = 0;
        public string MainImageURL { get; set; } = string.Empty;
    }

    public class CategoryOption
    {
        [JsonPropertyName("categoryId")] public int CategoryId { get; set; }
        [JsonPropertyName("categoryName")] public string CategoryName { get; set; } = string.Empty;
    }

    private IEnumerable<string> ValidateName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            yield return "Product name is required";
        else if (name.Length < 3)
            yield return "Product name must be at least 3 characters";
        else if (name.Length > 100)
            yield return "Product name must not exceed 100 characters";
    }

    private IEnumerable<string> ValidateDescription(string description)
    {
        if (string.IsNullOrWhiteSpace(description))
            yield return "Description is required";
        else if (description.Length < 10)
            yield return "Description must be at least 10 characters";
        else if (description.Length > 500)
            yield return "Description must not exceed 500 characters";
    }

    private IEnumerable<string> ValidatePriceText(string priceText)
    {
        if (string.IsNullOrWhiteSpace(priceText))
            yield return "Price is required";
        else if (!decimal.TryParse(priceText, out var price))
            yield return "Price must be a valid number";
        else if (price <= 0)
            yield return "Price must be greater than 0";
        else if (price > 999999)
            yield return "Price cannot exceed 999,999 EGP";
    }

    private IEnumerable<string> ValidateQuantityText(string quantityText)
    {
        if (string.IsNullOrWhiteSpace(quantityText))
            yield return "Quantity is required";
        else if (!int.TryParse(quantityText, out var quantity))
            yield return "Quantity must be a valid number";
        else if (quantity < 0)
            yield return "Quantity cannot be negative";
        else if (quantity > 999999)
            yield return "Quantity is too high";
    }

    private IEnumerable<string> ValidateCategory(int categoryId)
    {
        if (categoryId == 0)
            yield return "Category is required";
    }

    private void ValidateForm()
    {
        validationErrors.Clear();

        validationErrors.AddRange(ValidateName(productForm.ProductName));
        validationErrors.AddRange(ValidateDescription(productForm.ProductDescription));
        validationErrors.AddRange(ValidatePriceText(productForm.Price));
        validationErrors.AddRange(ValidateQuantityText(productForm.QuantityText));
        validationErrors.AddRange(ValidateCategory(productForm.CategoryId));

        if (!string.IsNullOrEmpty(productForm.MainImageURL) && !IsValidUrl(productForm.MainImageURL))
            validationErrors.Add("Invalid image URL format");
    }

    private bool IsValidUrl(string url)
    {
        return Uri.TryCreate(url, UriKind.Absolute, out var uriResult) &&
               (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);
    }

    private async Task Submit()
    {
        ValidateForm();

        if (validationErrors.Any())
            return;

        isSubmitting = true;

        try
        {
            var createRequest = new CreateProductRequest
            {
                ProductName = productForm.ProductName,
                ProductDescription = productForm.ProductDescription,
                Price = decimal.Parse(productForm.Price),
                QuantityInStock = int.Parse(productForm.QuantityText),
                CategoryId = productForm.CategoryId,
                MainImageURL = productForm.MainImageURL
            };

            var response = await ApiService.PostAsync<ApiService.ApiResponse<object>>(
                "/api/Products/Create", createRequest);

            if (response?.Success == true)
            {
                Snackbar.Add("Product created successfully!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Failed to create product", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating product: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    public class CreateProductRequest
    {
        [JsonPropertyName("productName")] public string ProductName { get; set; } = string.Empty;
        [JsonPropertyName("productDescription")] public string ProductDescription { get; set; } = string.Empty;
        [JsonPropertyName("price")] public decimal Price { get; set; }
        [JsonPropertyName("quantityInStock")] public int QuantityInStock { get; set; }
        [JsonPropertyName("categoryId")] public int CategoryId { get; set; }
        [JsonPropertyName("mainImageURL")] public string MainImageURL { get; set; } = string.Empty;
    }
}