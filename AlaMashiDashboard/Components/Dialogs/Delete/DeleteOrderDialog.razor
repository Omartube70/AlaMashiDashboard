@namespace AlaMashi.AdminDashboard.Components.Dialogs
@using global::AdminDashboard.Services
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject LocalizationService Localization

<MudDialog>
    <TitleContent>
        <div class="d-flex align-center gap-2">
            <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Error" />
            <MudText Typo="Typo.h6">@Localization.Get("dialog.delete_order")</MudText>
        </div>
    </TitleContent>

    <DialogContent>
        <MudStack Spacing="4" Class="pa-2">
            <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined" Class="mb-4">
                <MudText Typo="Typo.body1" Class="font-weight-medium">
                    @Localization.Get("dialog.delete_warning")
                </MudText>
            </MudAlert>

            <MudPaper Elevation="2" Class="pa-4">
                <MudStack Spacing="3">
                    <div class="d-flex align-center">
                        <MudAvatar Size="Size.Medium" Color="Color.Primary" Class="@(_isRtl ? "ml-3" : "mr-3")">
                            <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" />
                        </MudAvatar>
                        <MudStack>
                            <MudText Typo="Typo.h6">@Localization.Get("orders.order_id"): #@Order.OrderId</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">@Localization.Get("orders.total"): @Order.TotalAmount.ToString("N2") @Localization.Get("units.egp")</MudText>
                        </MudStack>
                    </div>
                    
                    <MudDivider />
                    
                    <MudGrid>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body2" Color="Color.Secondary">@Localization.Get("orders.customer_name")</MudText>
                            <MudText Typo="Typo.body1">@Order.CustomerName</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body2" Color="Color.Secondary">@Localization.Get("orders.status")</MudText>
                            <MudChip Size="Size.Small" Color="@(GetStatusColor(Order.Status))">
                                @GetStatusText(Order.Status)
                            </MudChip>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body2" Color="Color.Secondary">@Localization.Get("orders.order_date")</MudText>
                            <MudText Typo="Typo.body1">@Order.OrderDate.ToString("yyyy-MM-dd")</MudText>
                        </MudItem>
                        <MudItem xs="6">
                            <MudText Typo="Typo.body2" Color="Color.Secondary">@Localization.Get("orders.delivery_date")</MudText>
                            <MudText Typo="Typo.body1">@Order.DeliveryDate.ToString("yyyy-MM-dd")</MudText>
                        </MudItem>
                    </MudGrid>
                </MudStack>
            </MudPaper>

            <MudDivider />

            <MudText Typo="Typo.body2" Color="Color.Secondary">
                @Localization.Get("dialog.admin_password_required")
            </MudText>

            <MudTextField @bind-Value="adminPassword"
                          Label="@Localization.Get("dialog.admin_password")"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Lock"
                          Type="InputType.Password"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidatePassword))" />

            @if (validationErrors.Any())
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">
                    @foreach (var error in validationErrors)
                    {
                        <div>• @error</div>
                    }
                </MudAlert>
            }
        </MudStack>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Close">
            @Localization.Get("common.cancel")
        </MudButton>
        <MudButton OnClick="Confirm" Variant="Variant.Filled" Color="Color.Error" Disabled="@isSubmitting" StartIcon="@Icons.Material.Filled.Delete">
            @(isSubmitting ? Localization.Get("dialog.deleting") : Localization.Get("common.delete"))
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public OrderDto Order { get; set; } = new();
    
    private bool _isRtl => Localization.IsArabic;
    private string adminPassword = string.Empty;
    private List<string> validationErrors = new();
    private bool isSubmitting = false;

    public class OrderDto
    {
        public int OrderId { get; set; }
        public string CustomerName { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public DateTime OrderDate { get; set; }
        public DateTime DeliveryDate { get; set; }
        public string Status { get; set; } = string.Empty;
        public decimal TotalAmount { get; set; }
    }

    private Color GetStatusColor(string status)
    {
        return status.ToLower() switch
        {
            "pending" => Color.Warning,
            "in_preparation" => Color.Info,
            "out_for_delivery" => Color.Primary,
            "delivered" => Color.Success,
            "canceled" => Color.Error,
            _ => Color.Default
        };
    }

    private string GetStatusText(string status)
    {
        if (Localization.IsArabic)
        {
            return status.ToLower() switch
            {
                "pending" => "معلق",
                "in_preparation" => "قيد التحضير",
                "out_for_delivery" => "في التوصيل",
                "delivered" => "تم التوصيل",
                "canceled" => "ملغي",
                _ => status
            };
        }
        else
        {
            return status.ToLower() switch
            {
                "pending" => "Pending",
                "in_preparation" => "In Preparation",
                "out_for_delivery" => "Out for Delivery",
                "delivered" => "Delivered",
                "canceled" => "Canceled",
                _ => status
            };
        }
    }

    private IEnumerable<string> ValidatePassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
            yield return Localization.Get("validation.required");
        else if (password.Length < 4)
            yield return Localization.IsArabic ? "كلمة المرور يجب أن تكون 4 أحرف على الأقل" : "Password must be at least 4 characters";
    }

    private void ValidateForm()
    {
        validationErrors.Clear();
        validationErrors.AddRange(ValidatePassword(adminPassword));
    }

    private async Task Confirm()
    {
        ValidateForm();
        if (validationErrors.Any()) return;

        isSubmitting = true;
        try
        {
            // Here you would typically validate the admin password against your API
            // For now, we'll just close the dialog with the password
            var result = new DeleteOrderResult
            {
                Confirmed = true,
                AdminPassword = adminPassword,
                OrderId = Order.OrderId
            };
            
            MudDialog.Close(DialogResult.Ok(result));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Localization.Get("common.error")}: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();

    public class DeleteOrderResult
    {
        public bool Confirmed { get; set; }
        public string AdminPassword { get; set; } = string.Empty;
        public int OrderId { get; set; }
    }
}