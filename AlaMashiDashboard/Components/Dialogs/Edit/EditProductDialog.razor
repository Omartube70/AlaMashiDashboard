@namespace AlaMashi.AdminDashboard.Components.Dialogs
@inject ApiService ApiService
@using global::AdminDashboard.Services
@using Microsoft.AspNetCore.Components.Forms
@inject ISnackbar Snackbar
@inject LocalizationService Localization

<MudDialog>
    <TitleContent>
        <div class="d-flex align-center gap-2">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Info" />
            <MudText Typo="Typo.h6">@Localization.Get("dialog.edit_product")</MudText>
        </div>
    </TitleContent>

    <DialogContent>
        <MudStack Spacing="3" Style="max-height: 600px; overflow-y: auto;" Class="pa-2">
            <MudTextField @bind-Value="productForm.ProductName"
                          Label="@Localization.Get("dialog.product_name")"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.ShoppingBag"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateName))" />

            <MudTextField @bind-Value="productForm.ProductDescription"
                          Label="@Localization.Get("dialog.description")"
                          Variant="Variant.Outlined"
                          Lines="3"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Description"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateDescription))" />

            <MudNumericField @bind-Value="productForm.Price"
                             Label="@Localization.Get("dialog.price")"
                             Variant="Variant.Outlined"
                             Min="0m"
                             Adornment="Adornment.Start"
                             AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                             Format="N2" />

            <MudNumericField @bind-Value="productForm.QuantityInStock"
                             Label="@Localization.Get("dialog.quantity")"
                             Variant="Variant.Outlined"
                             Min="0"
                             Adornment="Adornment.Start"
                             AdornmentIcon="@Icons.Material.Filled.Inventory" />

            <MudSelect @bind-Value="productForm.CategoryId"
                       Label="@Localization.Get("dialog.category")"
                       Variant="Variant.Outlined"
                       Adornment="Adornment.Start"
                       AdornmentIcon="@Icons.Material.Filled.Category">
                @if (categories != null)
                {
                    @foreach (var cat in categories)
                    {
                        <MudSelectItem Value="@cat.CategoryId">@cat.CategoryName</MudSelectItem>
                    }
                }
            </MudSelect>

            <MudDivider Class="my-2" />

            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">
                <MudIcon Icon="@Icons.Material.Filled.Image" Size="Size.Small" Class="@(_isRtl ? "ml-1" : "mr-1")" />
                @Localization.Get("products.image")
            </MudText>

            @if (!string.IsNullOrEmpty(productForm.MainImageURL))
            {
                <MudCard Elevation="0" Outlined="true" Class="mb-3">
                    <MudCardContent Class="pa-2">
                        <MudImage Src="@productForm.MainImageURL" 
                                  Alt="@productForm.ProductName"
                                  Height="200" 
                                  ObjectFit="ObjectFit.Contain"
                                  Class="rounded" />
                        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mt-2">
                            @Localization.Get("products.current_image")
                        </MudText>
                    </MudCardContent>
                </MudCard>
            }

            <MudFileUpload T="IBrowserFile" 
                           FilesChanged="OnFileSelected"
                           Accept="image/*">
                <ButtonTemplate>
                    <MudButton HtmlTag="label"
                               Variant="Variant.Outlined"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload"
                               for="@context">
                        @(selectedFileName ?? Localization.Get("products.change_image"))
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>

            @if (!string.IsNullOrEmpty(selectedFileName))
            {
                <MudChip Color="Color.Success" 
                         Icon="@Icons.Material.Filled.CheckCircle"
                         OnClose="ClearSelectedFile">
                    @selectedFileName
                </MudChip>
            }

            @if (validationErrors.Any())
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">
                    @foreach (var error in validationErrors)
                    {
                        <div>• @error</div>
                    }
                </MudAlert>
            }
        </MudStack>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.Close">
            @Localization.Get("common.cancel")
        </MudButton>
        <MudButton OnClick="Submit" Variant="Variant.Filled" Color="Color.Info" Disabled="@isSubmitting" StartIcon="@Icons.Material.Filled.Save">
            @(isSubmitting ? Localization.Get("dialog.updating") : Localization.Get("dialog.update"))
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public int ProductID { get; set; }
    [Parameter] public string ProductName { get; set; } = string.Empty;
    [Parameter] public string ProductDescription { get; set; } = string.Empty;
    [Parameter] public decimal Price { get; set; }
    [Parameter] public int QuantityInStock { get; set; }
    [Parameter] public int CategoryId { get; set; }
    [Parameter] public string MainImageURL { get; set; } = string.Empty;

    private UpdateProductForm productForm = new();
    private List<CategoryOption> categories = new();
    private List<string> validationErrors = new();
    private bool isSubmitting = false;
    private IBrowserFile? selectedFile;
    private string? selectedFileName;
    private bool _isRtl => Localization.IsArabic;

    private void OnFileSelected(IBrowserFile file)
    {
        selectedFile = file;
        selectedFileName = file.Name;
    }

    private void ClearSelectedFile()
    {
        selectedFile = null;
        selectedFileName = null;
    }

    protected override async Task OnInitializedAsync()
    {
        productForm = new UpdateProductForm
        {
            ProductName = ProductName,
            ProductDescription = ProductDescription,
            Price = Price,
            QuantityInStock = QuantityInStock,
            CategoryId = CategoryId,
            MainImageURL = MainImageURL
        };
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        try
        {
            var response = await ApiService.GetAsync<ApiService.ApiResponse<List<CategoryOption>>>("/api/Categories/flat");
            categories = response?.Data ?? new();
        }
        catch { }
    }

    public class UpdateProductForm
    {
        public string ProductName { get; set; } = string.Empty;
        public string ProductDescription { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int QuantityInStock { get; set; }
        public int CategoryId { get; set; }
        public string MainImageURL { get; set; } = string.Empty;
    }

    public class CategoryOption
    {
        [JsonPropertyName("categoryId")] public int CategoryId { get; set; }
        [JsonPropertyName("categoryName")] public string CategoryName { get; set; } = string.Empty;
    }

    private IEnumerable<string> ValidateName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            yield return Localization.Get("validation.required");
        else if (name.Length < 3 || name.Length > 100)
            yield return Localization.Get("validation.between_chars").Replace("{0}", "3").Replace("{1}", "100");
    }

    private IEnumerable<string> ValidateDescription(string desc)
    {
        if (string.IsNullOrWhiteSpace(desc))
            yield return Localization.Get("validation.required");
        else if (desc.Length < 10 || desc.Length > 500)
            yield return Localization.Get("validation.between_chars").Replace("{0}", "10").Replace("{1}", "500");
    }

    private void ValidateForm()
    {
        validationErrors.Clear();
        validationErrors.AddRange(ValidateName(productForm.ProductName));
        validationErrors.AddRange(ValidateDescription(productForm.ProductDescription));
    }

    private async Task Submit()
    {
        ValidateForm();
        if (validationErrors.Any()) return;

        isSubmitting = true;
        try
        {
            // إذا في صورة جديدة، نستخدم MultipartFormData
            if (selectedFile != null)
            {
                using var content = new MultipartFormDataContent();
                content.Add(new StringContent(productForm.ProductName), "productName");
                content.Add(new StringContent(productForm.ProductDescription), "productDescription");
                content.Add(new StringContent(productForm.Price.ToString()), "price");
                content.Add(new StringContent(productForm.QuantityInStock.ToString()), "quantityInStock");
                content.Add(new StringContent(productForm.CategoryId.ToString()), "categoryId");

                var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024));
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
                content.Add(fileContent, "ProductImageFile", selectedFile.Name);

                var response = await ApiService.PatchMultipartAsync<ApiService.ApiResponse<object>>($"/api/Products/{ProductID}", content);

                if (response?.Success == true)
                {
                    Snackbar.Add(Localization.Get("common.product_updated"), Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    Snackbar.Add(response?.Message ?? Localization.Get("common.failed"), Severity.Error);
                }
            }
            else
            {
                // إذا ما فيش صورة جديدة، نستخدم PATCH عادي
                var updateRequest = new
                {
                    productName = productForm.ProductName,
                    productDescription = productForm.ProductDescription,
                    price = productForm.Price,
                    quantityInStock = productForm.QuantityInStock,
                    categoryId = productForm.CategoryId
                };

                var response = await ApiService.PatchAsync<ApiService.ApiResponse<object>>($"/api/Products/{ProductID}", updateRequest);

                if (response?.Success == true)
                {
                    Snackbar.Add(Localization.Get("common.product_updated"), Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                }
                else
                {
                    Snackbar.Add(response?.Message ?? Localization.Get("common.failed"), Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Localization.Get("common.error")}: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();
}