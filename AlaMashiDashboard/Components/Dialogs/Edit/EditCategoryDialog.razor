@namespace AlaMashi.AdminDashboard.Components.Dialogs
@using global::AdminDashboard.Services
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject LocalizationService Localization

<MudDialog ClassActions="dialog-actions-improved" ClassContent="dialog-content-smooth">
    <TitleContent>
        <div class="d-flex align-center gap-2 pa-2">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Info" Size="Size.Large" />
            <MudText Typo="Typo.h5" Class="font-weight-bold">@Localization.Get("dialog.edit_category")</MudText>
        </div>
        <MudDivider />
    </TitleContent>

    <DialogContent>
        <MudStack Spacing="4" Class="pa-2">
            <MudTextField @bind-Value="categoryForm.CategoryName"
                          Label="@Localization.Get("dialog.category_name")"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Label"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateName))" />

            <MudTextField @bind-Value="categoryForm.IconName"
                          Label="@Localization.Get("dialog.icon_name")"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Image"
                          HelperText="@Localization.Get("dialog.icon_helper")" />

            @if (validationErrors.Any())
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">
                    @foreach (var error in validationErrors)
                    {
                        <div>• @error</div>
                    }
                </MudAlert>
            }
        </MudStack>
    </DialogContent>

    <DialogActions>
        <MudStack Row="true" Spacing="2" Class="pa-2" Style="width:100%;" Justify="Justify.FlexEnd">
            <MudButton OnClick="Cancel" Variant="Variant.Outlined" Color="Color.Default" StartIcon="@Icons.Material.Filled.Close" Size="Size.Medium">
                @Localization.Get("common.cancel")
            </MudButton>
            <MudButton OnClick="Submit" Variant="Variant.Filled" Color="Color.Info" Disabled="@isSubmitting" StartIcon="@Icons.Material.Filled.Save" Size="Size.Medium" Class="px-6">
                @if (isSubmitting)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                    <span>@Localization.Get("dialog.updating")</span>
                }
                else
                {
                    @Localization.Get("dialog.update")
                }
            </MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public int CategoryId { get; set; }
    [Parameter] public string CategoryName { get; set; } = string.Empty;
    [Parameter] public string IconName { get; set; } = string.Empty;

    private UpdateCategoryForm categoryForm = new();
    private List<string> validationErrors = new();
    private bool isSubmitting = false;

    protected override void OnInitialized()
    {
        categoryForm.CategoryName = CategoryName;
        categoryForm.IconName = IconName;
    }

    public class UpdateCategoryForm
    {
        public string CategoryName { get; set; } = string.Empty;
        public string IconName { get; set; } = string.Empty;
    }

    private IEnumerable<string> ValidateName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            yield return Localization.Get("validation.required");
        else if (name.Length < 2 || name.Length > 50)
            yield return Localization.IsArabic ? "يجب أن يكون بين 2 و 50 حرف" : "Must be between 2 and 50 characters";
    }

    private void ValidateForm()
    {
        validationErrors.Clear();
        validationErrors.AddRange(ValidateName(categoryForm.CategoryName));
    }

    private async Task Submit()
    {
        ValidateForm();
        if (validationErrors.Any()) return;

        isSubmitting = true;
        try
        {
            var updateRequest = new UpdateCategoryRequest
            {
                NewCategoryName = categoryForm.CategoryName,
                IconName = categoryForm.IconName
            };

            var response = await ApiService.PatchJsonAsync<ApiService.ApiResponse<object>>($"/api/Categories/{CategoryId}", updateRequest);

            if (response?.Status == "success")
            {
                Snackbar.Add(Localization.Get("common.category_updated"), Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                var message = response?.Message ?? response?.Data?.ToString() ?? Localization.Get("common.failed");
                Snackbar.Add(message, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Localization.Get("common.error")}: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();

    public class UpdateCategoryRequest
    {
        [JsonPropertyName("categoryName")] public string NewCategoryName { get; set; } = string.Empty;
        [JsonPropertyName("iconName")] public string IconName { get; set; } = string.Empty;
    }
}