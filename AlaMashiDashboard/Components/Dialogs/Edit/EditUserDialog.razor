@namespace AlaMashi.AdminDashboard.Components.Dialogs
@using global::AdminDashboard.Services
@using System.Text.RegularExpressions
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject LocalizationService Localization

<MudDialog ClassActions="dialog-actions-improved" ClassContent="dialog-content-smooth">
    <TitleContent>
        <div class="d-flex align-center gap-2 pa-2">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Info" Size="Size.Large" />
            <MudText Typo="Typo.h5" Class="font-weight-bold">@Localization.Get("dialog.edit_user")</MudText>
        </div>
        <MudDivider />
    </TitleContent>

    <DialogContent>
        <MudStack Spacing="4" Class="pa-2">
            <MudTextField @bind-Value="userForm.UserName"
                          Label="@Localization.Get("users.username")"
                          Variant="Variant.Outlined"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Person"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateUserName))" />

            <MudTextField @bind-Value="userForm.Email"
                          Label="@Localization.Get("users.email")"
                          Variant="Variant.Outlined"
                          InputType="InputType.Email"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Email"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateEmail))" />

            <MudTextField @bind-Value="userForm.Phone"
                          Label="@Localization.Get("users.phone")"
                          Variant="Variant.Outlined"
                          InputType="InputType.Text"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Phone"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidatePhone))" />

            @if (validationErrors.Any())
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">
                    @foreach (var error in validationErrors)
                    {
                        <div>• @error</div>
                    }
                </MudAlert>
            }
        </MudStack>
    </DialogContent>

    <DialogActions>
        <MudStack Row="true" Spacing="2" Class="pa-2" Style="width:100%;" Justify="Justify.FlexEnd">
            <MudButton OnClick="Cancel" Variant="Variant.Outlined" Color="Color.Default" StartIcon="@Icons.Material.Filled.Close" Size="Size.Medium">
                @Localization.Get("common.cancel")
            </MudButton>
            <MudButton OnClick="Submit" Variant="Variant.Filled" Color="Color.Info" Disabled="@isSubmitting" StartIcon="@Icons.Material.Filled.Save" Size="Size.Medium" Class="px-6">
                @if (isSubmitting)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                    <span>@Localization.Get("dialog.updating")</span>
                }
                else
                {
                    @Localization.Get("dialog.update")
                }
            </MudButton>
        </MudStack>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public int UserId { get; set; }
    [Parameter] public string UserName { get; set; } = string.Empty;
    [Parameter] public string Email { get; set; } = string.Empty;
    [Parameter] public string Phone { get; set; } = string.Empty;

    private UpdateUserForm userForm = new();
    private List<string> validationErrors = new();
    private bool isSubmitting = false;

    protected override void OnInitialized()
    {
        userForm = new UpdateUserForm
        {
            UserName = UserName,
            Email = Email,
            Phone = Phone
        };
    }

    public class UpdateUserForm
    {
        public string UserName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
    }

    private IEnumerable<string> ValidateUserName(string username)
    {
        if (string.IsNullOrWhiteSpace(username))
            yield return Localization.Get("validation.required");
        else if (username.Length < 3)
            yield return Localization.Get("validation.username_min");
        else if (username.Length > 50)
            yield return Localization.Get("validation.username_max");
    }

    private IEnumerable<string> ValidateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            yield return Localization.Get("validation.required");
        else if (!Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
            yield return Localization.Get("validation.invalid_email");
    }

    private IEnumerable<string> ValidatePhone(string phone)
    {
        if (!string.IsNullOrWhiteSpace(phone))
        {
            // Egyptian phone number: 11 digits starting with 01
            if (!Regex.IsMatch(phone, @"^01[0-9]{9}$"))
                yield return Localization.IsArabic 
                    ? "رقم الهاتف المصري يجب أن يكون 11 رقم ويبدأ بـ 01" 
                    : "Egyptian phone must be 11 digits starting with 01";
        }
    }

    private void ValidateForm()
    {
        validationErrors.Clear();
        validationErrors.AddRange(ValidateUserName(userForm.UserName));
        validationErrors.AddRange(ValidateEmail(userForm.Email));
        validationErrors.AddRange(ValidatePhone(userForm.Phone));
    }

    private async Task Submit()
    {
        ValidateForm();
        if (validationErrors.Any()) return;

        isSubmitting = true;
        try
        {
            var updateRequest = new
            {
                userName = userForm.UserName,
                email = userForm.Email,
                phone = userForm.Phone
            };

            var response = await ApiService.PatchAsync<ApiService.ApiResponse<object>>($"/api/Users/{UserId}", updateRequest);

            if (response?.Success == true)
            {
                Snackbar.Add(Localization.Get("common.user_updated"), Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add(response?.Message ?? Localization.Get("common.failed"), Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{Localization.Get("common.error")}: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();
}