@namespace AlaMashi.AdminDashboard.Components.Dialogs
@inject ApiService ApiService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudStack Spacing="3">
            <MudTextField @bind-Value="offerForm.Title"
                          Label="Offer Title"
                          Variant="Variant.Outlined"
                          Placeholder="e.g., Summer Sale"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateTitle))" />

            <MudTextField @bind-Value="offerForm.Description"
                          Label="Description"
                          Variant="Variant.Outlined"
                          Lines="3"
                          Placeholder="Describe your offer..."
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateDescription))" />

            <MudNumericField @bind-Value="offerForm.DiscountPercentage"
                             Label="Discount Percentage (%)"
                             Variant="Variant.Outlined"
                             Min="1"
                             Max="100"
                             Validation="@(new Func<decimal, IEnumerable<string>>(ValidateDiscount))" />

            <MudDatePicker @bind-Date="offerForm.StartDate"
                           Label="Start Date"
                           Variant="Variant.Outlined"
                           PickerVariant="PickerVariant.Dialog"
                           ShowToolbar="true"
                           DateFormat="dd/MM/yyyy" />

            <MudDatePicker @bind-Date="offerForm.EndDate"
                           Label="End Date"
                           Variant="Variant.Outlined"
                           PickerVariant="PickerVariant.Dialog"
                           ShowToolbar="true"
                           DateFormat="dd/MM/yyyy" />

            @if (validationErrors.Any())
            {
                <MudAlert Severity="Severity.Error" Class="mb-2">
                    @foreach (var error in validationErrors)
                    {
                        <div>@error</div>
                    }
                </MudAlert>
            }
        </MudStack>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Outlined">Cancel</MudButton>
        <MudButton OnClick="Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@isSubmitting">
            @(isSubmitting ? "Creating..." : "Create Offer")
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    private CreateOfferForm offerForm = new();
    private List<string> validationErrors = new();
    private bool isSubmitting = false;

    public class CreateOfferForm
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public decimal DiscountPercentage { get; set; } = 10;
        public DateTime? StartDate { get; set; } = DateTime.Now;
        public DateTime? EndDate { get; set; } = DateTime.Now.AddDays(7);
    }

    private IEnumerable<string> ValidateTitle(string title)
    {
        if (string.IsNullOrWhiteSpace(title))
            yield return "Title is required";
        else if (title.Length < 3)
            yield return "Title must be at least 3 characters";
        else if (title.Length > 100)
            yield return "Title must not exceed 100 characters";
    }

    private IEnumerable<string> ValidateDescription(string description)
    {
        if (string.IsNullOrWhiteSpace(description))
            yield return "Description is required";
        else if (description.Length < 10)
            yield return "Description must be at least 10 characters";
        else if (description.Length > 500)
            yield return "Description must not exceed 500 characters";
    }

    private IEnumerable<string> ValidateDiscount(decimal discount)
    {
        if (discount < 1)
            yield return "Discount must be at least 1%";
        else if (discount > 100)
            yield return "Discount cannot exceed 100%";
    }

    private void ValidateForm()
    {
        validationErrors.Clear();

        validationErrors.AddRange(ValidateTitle(offerForm.Title));
        validationErrors.AddRange(ValidateDescription(offerForm.Description));
        validationErrors.AddRange(ValidateDiscount(offerForm.DiscountPercentage));

        if (!offerForm.StartDate.HasValue)
            validationErrors.Add("Start date is required");

        if (!offerForm.EndDate.HasValue)
            validationErrors.Add("End date is required");

        if (offerForm.StartDate.HasValue && offerForm.EndDate.HasValue && offerForm.StartDate > offerForm.EndDate)
            validationErrors.Add("End date must be after start date");
    }

    private async Task Submit()
    {
        ValidateForm();

        if (validationErrors.Any())
            return;

        isSubmitting = true;

        try
        {
            var createRequest = new CreateOfferRequest
            {
                Title = offerForm.Title,
                Description = offerForm.Description,
                DiscountPercentage = offerForm.DiscountPercentage,
                StartDate = offerForm.StartDate ?? DateTime.Now,
                EndDate = offerForm.EndDate ?? DateTime.Now.AddDays(7)
            };

            var response = await ApiService.PostAsync<ApiService.ApiResponse<object>>(
                "/api/Offers/Create", createRequest);

            if (response?.Success == true)
            {
                Snackbar.Add("Offer created successfully!", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add(response?.Message ?? "Failed to create offer", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating offer: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    public class CreateOfferRequest
    {
        [JsonPropertyName("title")] public string Title { get; set; } = string.Empty;
        [JsonPropertyName("description")] public string Description { get; set; } = string.Empty;
        [JsonPropertyName("discountPercentage")] public decimal DiscountPercentage { get; set; }
        [JsonPropertyName("startDate")] public DateTime StartDate { get; set; }
        [JsonPropertyName("endDate")] public DateTime EndDate { get; set; }
    }
}